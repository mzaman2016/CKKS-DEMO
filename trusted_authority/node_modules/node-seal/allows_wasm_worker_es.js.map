{"version":3,"file":"allows_wasm_worker_es.js","sources":["../src/bin/seal_allows_wasm_worker.js","../src/main/loader.ts","../src/implementation/constants.ts","../src/implementation/finalizer.ts","../src/implementation/batch-encoder.ts","../src/implementation/cipher-text.ts","../src/implementation/ckks-encoder.ts","../src/implementation/coeff-modulus.ts","../src/implementation/compr-mode-type.ts","../src/implementation/context.ts","../src/implementation/context-data.ts","../src/implementation/decryptor.ts","../src/implementation/encryption-parameter-qualifiers.ts","../src/implementation/encryption-parameters.ts","../src/implementation/encryptor.ts","../src/implementation/evaluator.ts","../src/implementation/exception.ts","../src/implementation/galois-keys.ts","../src/implementation/key-generator.ts","../src/implementation/memory-pool-handle.ts","../src/implementation/modulus.ts","../src/implementation/parms-id-type.ts","../src/implementation/plain-modulus.ts","../src/implementation/plain-text.ts","../src/implementation/public-key.ts","../src/implementation/relin-keys.ts","../src/implementation/scheme-type.ts","../src/implementation/seal.ts","../src/implementation/secret-key.ts","../src/implementation/security-level.ts","../src/implementation/serializable.ts","../src/implementation/vector.ts","../src/allows_wasm_worker_es.ts","../src/main/seal.ts"],"sourcesContent":["async function Module(moduleArg={}){var moduleRtn;var l=moduleArg,aa=\"./this.program\",ba=import.meta.url,ca;try{new URL(\".\",ba)}catch{}ca=b=>{var a=new XMLHttpRequest;a.open(\"GET\",b,!1);a.responseType=\"arraybuffer\";a.send(null);return new Uint8Array(a.response)};var da=console.error.bind(console),ea,p=!1,u,fa,ha,ia,ja,w,y,z,A,C,ka,la,ma,na,oa=!1;\nfunction pa(){var b=ia.buffer;ja=new Int8Array(b);y=new Int16Array(b);w=new Uint8Array(b);z=new Uint16Array(b);A=new Int32Array(b);C=new Uint32Array(b);ka=new Float32Array(b);la=new Float64Array(b);ma=new BigInt64Array(b);na=new BigUint64Array(b)}var D=0,E=null;function qa(b){l.onAbort?.(b);b=\"Aborted(\"+b+\")\";da(b);p=!0;b=new WebAssembly.RuntimeError(b+\". Build with -sASSERTIONS for more info.\");ha?.(b);throw b;}var ra;\nasync function sa(b){if(!ArrayBuffer.isView(b))if(b==ra&&ea)b=new Uint8Array(ea);else if(ca)b=ca(b);else throw\"both async and sync fetching of the wasm failed\";return b}async function ta(b){var a=ra;try{var c=await sa(a);return await WebAssembly.instantiate(c,b)}catch(d){da(`failed to asynchronously prepare wasm: ${d}`),qa(d)}}async function ua(b){return ta(b)}class va{name=\"ExitStatus\";constructor(b){this.message=`Program terminated with exit(${b})`;this.status=b}}\nvar wa=b=>{for(;0<b.length;)b.shift()(l)},xa=[],ya=[],za=()=>{var b=l.preRun.shift();ya.push(b)},Aa=b=>{for(var a,c,d=0,e=0,g=b.length,f=new Uint8Array((3*g>>2)-(\"=\"==b[g-2])-(\"=\"==b[g-1]));d<g;d+=4,e+=3)a=F[b.charCodeAt(d+1)],c=F[b.charCodeAt(d+2)],f[e]=F[b.charCodeAt(d)]<<2|a>>4,f[e+1]=a<<4|c>>2,f[e+2]=c<<6|F[b.charCodeAt(d+3)];return f},Ba=!0;class Ca{constructor(b){this.V=b-24}}\nvar Da=0,Ea=0,G=b=>{b>>>=0;for(var a=\"\";;){var c=w[b++>>>0];if(!c)return a;a+=String.fromCharCode(c)}},H={},J={},Fa={},K=class extends Error{constructor(b){super(b);this.name=\"BindingError\"}},Ga=b=>{throw new K(b);};function Ia(b,a,c={}){var d=a.name;if(!b)throw new K(`type \"${d}\" must have a positive integer typeid pointer`);if(J.hasOwnProperty(b)){if(c.wa)return;throw new K(`Cannot register type '${d}' twice`);}J[b]=a;delete Fa[b];H.hasOwnProperty(b)&&(a=H[b],delete H[b],a.forEach(e=>e()))}\nfunction L(b,a,c={}){return Ia(b,a,c)}\nvar Ja=(b,a,c)=>{switch(a){case 1:return c?d=>ja[d>>>0]:d=>w[d>>>0];case 2:return c?d=>y[d>>>1>>>0]:d=>z[d>>>1>>>0];case 4:return c?d=>A[d>>>2>>>0]:d=>C[d>>>2>>>0];case 8:return c?d=>ma[d>>>3>>>0]:d=>na[d>>>3>>>0];default:throw new TypeError(`invalid integer width (${a}): ${b}`);}},Ka=b=>{throw new K(b.T.X.U.name+\" instance already deleted\");},La=!1,Ma=()=>{},O=b=>{if(\"undefined\"===typeof FinalizationRegistry)return O=a=>a,b;La=new FinalizationRegistry(a=>{a=a.T;--a.count.value;0===a.count.value&&\n(a.Z?a.ca.fa(a.Z):a.X.U.fa(a.V))});O=a=>{var c=a.T;c.Z&&La.register(a,{T:c},a);return a};Ma=a=>{La.unregister(a)};return O(b)},Na=[];function Oa(){}\nvar Pa=(b,a)=>Object.defineProperty(a,\"name\",{value:b}),Qa={},Ra=(b,a,c)=>{if(void 0===b[a].Y){var d=b[a];b[a]=function(...e){if(!b[a].Y.hasOwnProperty(e.length))throw new K(`Function '${c}' called with an invalid number of arguments (${e.length}) - expects one of (${b[a].Y})!`);return b[a].Y[e.length].apply(this,e)};b[a].Y=[];b[a].Y[d.ga]=d}},Sa=(b,a,c)=>{if(l.hasOwnProperty(b)){if(void 0===c||void 0!==l[b].Y&&void 0!==l[b].Y[c])throw new K(`Cannot register public name '${b}' twice`);Ra(l,b,b);if(l[b].Y.hasOwnProperty(c))throw new K(`Cannot register multiple overloads of a function with the same number of arguments (${c})!`);\nl[b].Y[c]=a}else l[b]=a,l[b].ga=c},Ta=b=>{b=b.replace(/[^a-zA-Z0-9_]/g,\"$\");var a=b.charCodeAt(0);return 48<=a&&57>=a?`_${b}`:b};function Ua(b,a,c,d,e,g,f,h){this.name=b;this.constructor=a;this.ea=c;this.fa=d;this.aa=e;this.ua=g;this.ka=f;this.ta=h;this.ya=[]}\nvar Va=(b,a,c)=>{for(;a!==c;){if(!a.ka)throw new K(`Expected null or instance of ${c.name}, got an instance of ${a.name}`);b=a.ka(b);a=a.aa}return b},Wa=b=>{if(null===b)return\"null\";var a=typeof b;return\"object\"===a||\"array\"===a||\"function\"===a?b.toString():\"\"+b};\nfunction Xa(b,a){if(null===a){if(this.oa)throw new K(`null is not a valid ${this.name}`);return 0}if(!a.T)throw new K(`Cannot pass \"${Wa(a)}\" as a ${this.name}`);if(!a.T.V)throw new K(`Cannot pass deleted object as a pointer of type ${this.name}`);return Va(a.T.V,a.T.X.U,this.U)}\nfunction Ya(b,a){if(null===a){if(this.oa)throw new K(`null is not a valid ${this.name}`);if(this.na){var c=this.za();null!==b&&b.push(this.fa,c);return c}return 0}if(!a||!a.T)throw new K(`Cannot pass \"${Wa(a)}\" as a ${this.name}`);if(!a.T.V)throw new K(`Cannot pass deleted object as a pointer of type ${this.name}`);if(!this.ma&&a.T.X.ma)throw new K(`Cannot convert argument of type ${a.T.ca?a.T.ca.name:a.T.X.name} to parameter type ${this.name}`);c=Va(a.T.V,a.T.X.U,this.U);if(this.na){if(void 0===\na.T.Z)throw new K(\"Passing raw pointer to smart pointer is illegal\");switch(this.Ba){case 0:if(a.T.ca===this)c=a.T.Z;else throw new K(`Cannot convert argument of type ${a.T.ca?a.T.ca.name:a.T.X.name} to parameter type ${this.name}`);break;case 1:c=a.T.Z;break;case 2:if(a.T.ca===this)c=a.T.Z;else{var d=a.clone();c=this.Aa(c,P(()=>d[\"delete\"]()));null!==b&&b.push(this.fa,c)}break;default:throw new K(\"Unsupporting sharing policy\");}}return c}\nfunction Za(b,a){if(null===a){if(this.oa)throw new K(`null is not a valid ${this.name}`);return 0}if(!a.T)throw new K(`Cannot pass \"${Wa(a)}\" as a ${this.name}`);if(!a.T.V)throw new K(`Cannot pass deleted object as a pointer of type ${this.name}`);if(a.T.X.ma)throw new K(`Cannot convert argument of type ${a.T.X.name} to parameter type ${this.name}`);return Va(a.T.V,a.T.X.U,this.U)}function $a(b){return this.W(C[b>>>2>>>0])}\nvar ab=(b,a,c)=>{if(a===c)return b;if(void 0===c.aa)return null;b=ab(b,a,c.aa);return null===b?null:c.ta(b)},bb={},cb=(b,a)=>{if(void 0===a)throw new K(\"ptr should not be undefined\");for(;b.aa;)a=b.ka(a),b=b.aa;return bb[a]},db=class extends Error{constructor(b){super(b);this.name=\"InternalError\"}},eb=(b,a)=>{if(!a.X||!a.V)throw new db(\"makeClassHandle requires ptr and ptrType\");if(!!a.ca!==!!a.Z)throw new db(\"Both smartPtrType and smartPtr must be specified\");a.count={value:1};return O(Object.create(b,\n{T:{value:a,writable:!0}}))};function fb(b,a,c,d,e,g,f,h,m,n,k){this.name=b;this.U=a;this.oa=c;this.ma=d;this.na=e;this.xa=g;this.Ba=f;this.ra=h;this.za=m;this.Aa=n;this.fa=k;e||void 0!==a.aa?this.$=Ya:(this.$=d?Xa:Za,this.ba=null)}\nvar gb=(b,a,c)=>{if(!l.hasOwnProperty(b))throw new db(\"Replacing nonexistent public symbol\");void 0!==l[b].Y&&void 0!==c?l[b].Y[c]=a:(l[b]=a,l[b].ga=c)},hb=[],ib,jb=b=>{var a=hb[b];a||(hb[b]=a=ib.get(b));return a},kb=(b,a,c=[])=>{a=jb(a)(...c);return\"p\"==b[0]?a>>>0:a},lb=(b,a)=>(...c)=>kb(b,a,c),Q=(b,a)=>{b=G(b);var c=b.includes(\"p\")?lb(b,a):jb(a);if(\"function\"!=typeof c)throw new K(`unknown function pointer with signature ${b}: ${a}`);return c};class mb extends Error{}\nvar ob=b=>{b=nb(b);var a=G(b);R(b);return a},S=(b,a)=>{function c(g){e[g]||J[g]||(Fa[g]?Fa[g].forEach(c):(d.push(g),e[g]=!0))}var d=[],e={};a.forEach(c);throw new mb(`${b}: `+d.map(ob).join([\", \"]));},T=(b,a,c)=>{function d(h){h=c(h);if(h.length!==b.length)throw new db(\"Mismatched type converter count\");for(var m=0;m<b.length;++m)L(b[m],h[m])}b.forEach(h=>Fa[h]=a);var e=Array(a.length),g=[],f=0;a.forEach((h,m)=>{J.hasOwnProperty(h)?e[m]=J[h]:(g.push(h),H.hasOwnProperty(h)||(H[h]=[]),H[h].push(()=>\n{e[m]=J[h];++f;f===g.length&&d(e)}))});0===g.length&&d(e)},pb=b=>{for(;b.length;){var a=b.pop();b.pop()(a)}};function qb(b){for(var a=1;a<b.length;++a)if(null!==b[a]&&void 0===b[a].ba)return!0;return!1}\nfunction rb(b,a,c,d,e,g){var f=a.length;if(2>f)throw new K(\"argTypes array size mismatch! Must at least get return value and 'this' types!\");var h=null!==a[1]&&null!==c,m=qb(a);c=!a[0].qa;var n=a[0],k=a[1];d=[b,Ga,d,e,pb,n.W.bind(n),k?.$.bind(k)];for(e=2;e<f;++e)n=a[e],d.push(n.$.bind(n));if(!m)for(e=h?1:2;e<a.length;++e)null!==a[e].ba&&d.push(a[e].ba);m=qb(a);e=a.length-2;k=[];n=[\"fn\"];h&&n.push(\"thisWired\");for(f=0;f<e;++f)k.push(`arg${f}`),n.push(`arg${f}Wired`);k=k.join(\",\");n=n.join(\",\");k=`return function (${k}) {\\n`;\nm&&(k+=\"var destructors = [];\\n\");var t=m?\"destructors\":\"null\",q=\"humanName throwBindingError invoker fn runDestructors fromRetWire toClassParamWire\".split(\" \");h&&(k+=`var thisWired = toClassParamWire(${t}, this);\\n`);for(f=0;f<e;++f){var r=`toArg${f}Wire`;k+=`var arg${f}Wired = ${r}(${t}, arg${f});\\n`;q.push(r)}k+=(c||g?\"var rv = \":\"\")+`invoker(${n});\\n`;if(m)k+=\"runDestructors(destructors);\\n\";else for(f=h?1:2;f<a.length;++f)g=1===f?\"thisWired\":\"arg\"+(f-2)+\"Wired\",null!==a[f].ba&&(k+=`${g}_dtor(${g});\\n`,\nq.push(`${g}_dtor`));c&&(k+=\"var ret = fromRetWire(rv);\\nreturn ret;\\n\");a=(new Function(q,k+\"}\\n\"))(...d);return Pa(b,a)}\nvar sb=(b,a)=>{for(var c=[],d=0;d<b;d++)c.push(C[a+4*d>>>2>>>0]);return c},tb=b=>{b=b.trim();const a=b.indexOf(\"(\");return-1===a?b:b.slice(0,a)},ub=(b,a,c)=>{if(!(b instanceof Object))throw new K(`${c} with invalid \"this\": ${b}`);if(!(b instanceof a.U.constructor))throw new K(`${c} incompatible with \"this\" of type ${b.constructor.name}`);if(!b.T.V)throw new K(`cannot call emscripten binding method ${c} on deleted object`);return Va(b.T.V,b.T.X.U,a.U)},wb=[],U=[0,1,,1,null,1,!0,1,!1,1];\nfunction xb(b){b>>>=0;9<b&&0===--U[b+1]&&(U[b]=void 0,wb.push(b))}\nfor(var V=b=>{if(!b)throw new K(`Cannot use deleted val. handle = ${b}`);return U[b]},P=b=>{switch(b){case void 0:return 2;case null:return 4;case !0:return 6;case !1:return 8;default:const a=wb.pop()||U.length;U[a]=b;U[a+1]=1;return a}},yb={name:\"emscripten::val\",W:b=>{var a=V(b);xb(b);return a},$:(b,a)=>P(a),da:$a,ba:null},zb=(b,a,c)=>{switch(a){case 1:return c?function(d){return this.W(ja[d>>>0])}:function(d){return this.W(w[d>>>0])};case 2:return c?function(d){return this.W(y[d>>>1>>>0])}:function(d){return this.W(z[d>>>\n1>>>0])};case 4:return c?function(d){return this.W(A[d>>>2>>>0])}:function(d){return this.W(C[d>>>2>>>0])};default:throw new TypeError(`invalid integer width (${a}): ${b}`);}},Ab=(b,a)=>{var c=J[b];if(void 0===c)throw b=`${a} has unknown type ${ob(b)}`,new K(b);return c},Bb=(b,a)=>{switch(a){case 4:return function(c){return this.W(ka[c>>>2>>>0])};case 8:return function(c){return this.W(la[c>>>3>>>0])};default:throw new TypeError(`invalid float width (${a}): ${b}`);}},Cb=Object.assign({optional:!0},\nyb),W=(b,a,c)=>{var d=w;a>>>=0;if(!(0<c))return 0;var e=a;c=a+c-1;for(var g=0;g<b.length;++g){var f=b.codePointAt(g);if(127>=f){if(a>=c)break;d[a++>>>0]=f}else if(2047>=f){if(a+1>=c)break;d[a++>>>0]=192|f>>6;d[a++>>>0]=128|f&63}else if(65535>=f){if(a+2>=c)break;d[a++>>>0]=224|f>>12;d[a++>>>0]=128|f>>6&63;d[a++>>>0]=128|f&63}else{if(a+3>=c)break;d[a++>>>0]=240|f>>18;d[a++>>>0]=128|f>>12&63;d[a++>>>0]=128|f>>6&63;d[a++>>>0]=128|f&63;g++}}d[a>>>0]=0;return a-e},Db=b=>{for(var a=0,c=0;c<b.length;++c){var d=\nb.charCodeAt(c);127>=d?a++:2047>=d?a+=2:55296<=d&&57343>=d?(a+=4,++c):a+=3}return a},Eb=\"undefined\"!=typeof TextDecoder?new TextDecoder:void 0,Fb=(b,a,c,d)=>{c=a+c;if(d)return c;for(;b[a]&&!(a>=c);)++a;return a},Gb=(b=0,a)=>{var c=w;b>>>=0;a=Fb(c,b,a,!0);if(16<a-b&&c.buffer&&Eb)return Eb.decode(c.subarray(b,a));for(var d=\"\";b<a;){var e=c[b++];if(e&128){var g=c[b++]&63;if(192==(e&224))d+=String.fromCharCode((e&31)<<6|g);else{var f=c[b++]&63;e=224==(e&240)?(e&15)<<12|g<<6|f:(e&7)<<18|g<<12|f<<6|c[b++]&\n63;65536>e?d+=String.fromCharCode(e):(e-=65536,d+=String.fromCharCode(55296|e>>10,56320|e&1023))}}else d+=String.fromCharCode(e)}return d},Hb=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf-16le\"):void 0,Ib=(b,a,c)=>{b>>>=1;a=Fb(z,b,a/2,c);if(16<a-b&&Hb)return Hb.decode(z.subarray(b>>>0,a>>>0));for(c=\"\";b<a;++b)c+=String.fromCharCode(z[b>>>0]);return c},Jb=(b,a,c)=>{c??=2147483647;if(2>c)return 0;c-=2;var d=a;c=c<2*b.length?c/2:b.length;for(var e=0;e<c;++e)y[a>>>1>>>0]=b.charCodeAt(e),a+=2;y[a>>>\n1>>>0]=0;return a-d},Kb=b=>2*b.length,Lb=(b,a,c)=>{var d=\"\";b>>>=2;for(var e=0;!(e>=a/4);e++){var g=C[b+e>>>0];if(!g&&!c)break;d+=String.fromCodePoint(g)}return d},Mb=(b,a,c)=>{a>>>=0;c??=2147483647;if(4>c)return 0;var d=a;c=d+c-4;for(var e=0;e<b.length;++e){var g=b.codePointAt(e);65535<g&&e++;A[a>>>2>>>0]=g;a+=4;if(a+4>c)break}A[a>>>2>>>0]=0;return a-d},Nb=b=>{for(var a=0,c=0;c<b.length;++c)65535<b.codePointAt(c)&&c++,a+=4;return a},Ob=0,Pb=[],Qb=b=>{var a=Pb.length;Pb.push(b);return a},Rb=(b,a)=>\n{for(var c=Array(b),d=0;d<b;++d)c[d]=Ab(C[a+4*d>>>2>>>0],`parameter ${d}`);return c},Sb=(b,a,c)=>{var d=[];b=b(d,c);d.length&&(C[a>>>2>>>0]=P(d));return b},Tb={},Ub=b=>{var a=Tb[b];return void 0===a?G(b):a},X={},Vb=b=>{if(!(b instanceof va||\"unwind\"==b))throw b;},Wb=b=>{u=b;Ba||0<Ob||(l.onExit?.(b),p=!0);throw new va(b);},Xb=b=>{if(!p)try{if(b(),!(Ba||0<Ob))try{u=b=u,Wb(b)}catch(a){Vb(a)}}catch(a){Vb(a)}},Yb={},$b=()=>{if(!Zb){var b={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",\nLANG:(\"object\"==typeof navigator&&navigator.language||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:aa||\"./this.program\"},a;for(a in Yb)void 0===Yb[a]?delete b[a]:b[a]=Yb[a];var c=[];for(a in b)c.push(`${a}=${b[a]}`);Zb=c}return Zb},Zb,ac=()=>b=>crypto.getRandomValues(b),bc=b=>{(bc=ac())(b)},F=new Uint8Array(123),Y=25;0<=Y;--Y)F[48+Y]=52+Y,F[65+Y]=Y,F[97+Y]=26+Y;F[43]=62;F[47]=63;\n(()=>{let b=Oa.prototype;Object.assign(b,{isAliasOf:function(c){if(!(this instanceof Oa&&c instanceof Oa))return!1;var d=this.T.X.U,e=this.T.V;c.T=c.T;var g=c.T.X.U;for(c=c.T.V;d.aa;)e=d.ka(e),d=d.aa;for(;g.aa;)c=g.ka(c),g=g.aa;return d===g&&e===c},clone:function(){this.T.V||Ka(this);if(this.T.ja)return this.T.count.value+=1,this;var c=O,d=Object,e=d.create,g=Object.getPrototypeOf(this),f=this.T;c=c(e.call(d,g,{T:{value:{count:f.count,ia:f.ia,ja:f.ja,V:f.V,X:f.X,Z:f.Z,ca:f.ca}}}));c.T.count.value+=\n1;c.T.ia=!1;return c},[\"delete\"](){this.T.V||Ka(this);if(this.T.ia&&!this.T.ja)throw new K(\"Object already scheduled for deletion\");Ma(this);var c=this.T;--c.count.value;0===c.count.value&&(c.Z?c.ca.fa(c.Z):c.X.U.fa(c.V));this.T.ja||(this.T.Z=void 0,this.T.V=void 0)},isDeleted:function(){return!this.T.V},deleteLater:function(){this.T.V||Ka(this);if(this.T.ia&&!this.T.ja)throw new K(\"Object already scheduled for deletion\");Na.push(this);this.T.ia=!0;return this}});const a=Symbol.dispose;a&&(b[a]=b[\"delete\"])})();\nObject.assign(fb.prototype,{va(b){this.ra&&(b=this.ra(b));return b},pa(b){this.fa?.(b)},da:$a,W:function(b){function a(){return this.na?eb(this.U.ea,{X:this.xa,V:c,ca:this,Z:b}):eb(this.U.ea,{X:this,V:b})}var c=this.va(b);if(!c)return this.pa(b),null;var d=cb(this.U,c);if(void 0!==d){if(0===d.T.count.value)return d.T.V=c,d.T.Z=b,d.clone();d=d.clone();this.pa(b);return d}d=this.U.ua(c);d=Qa[d];if(!d)return a.call(this);d=this.ma?d.sa:d.pointerType;var e=ab(c,this.U,d.U);return null===e?a.call(this):\nthis.na?eb(d.U.ea,{X:d,V:e,ca:this,Z:b}):eb(d.U.ea,{X:d,V:e})}});l.noExitRuntime&&(Ba=l.noExitRuntime);l.printErr&&(da=l.printErr);l.wasmBinary&&(ea=l.wasmBinary);l.thisProgram&&(aa=l.thisProgram);\nvar cc,nb,dc,ec,R,fc={a:function(b,a,c){b>>>=0;var d=new Ca(b);C[d.V+16>>>2>>>0]=0;C[d.V+4>>>2>>>0]=a>>>0;C[d.V+8>>>2>>>0]=c>>>0;Da=b;Ea++;throw Da;},K:()=>qa(\"\"),v:function(b,a,c,d,e){b>>>=0;c>>>=0;a=G(a>>>0);d=0n===d;let g=f=>f;if(d){const f=8*c;g=h=>BigInt.asUintN(f,h);e=g(e)}L(b,{name:a,W:g,$:(f,h)=>{\"number\"==typeof h&&(h=BigInt(h));return h},da:Ja(a,c,!d),ba:null})},H:function(b,a,c,d){a=G(a>>>0);L(b>>>0,{name:a,W:function(e){return!!e},$:function(e,g){return g?c:d},da:function(e){return this.W(w[e>>>\n0])},ba:null})},g:function(b,a,c,d,e,g,f,h,m,n,k,t,q){b>>>=0;a>>>=0;c>>>=0;d>>>=0;g>>>=0;f>>>=0;h>>>=0;m>>>=0;n>>>=0;k>>>=0;t>>>=0;q>>>=0;k=G(k);g=Q(e>>>0,g);h&&=Q(f,h);n&&=Q(m,n);q=Q(t,q);var r=Ta(k);Sa(r,function(){S(`Cannot construct ${k} due to unbound types`,[d])});T([b,a,c],d?[d]:[],v=>{v=v[0];if(d){var x=v.U;var M=x.ea}else M=Oa.prototype;v=Pa(k,function(...Ha){if(Object.getPrototypeOf(this)!==N)throw new K(`Use 'new' to construct ${k}`);if(void 0===B.ha)throw new K(`${k} has no accessible constructor`);\nvar vb=B.ha[Ha.length];if(void 0===vb)throw new K(`Tried to invoke ctor of ${k} with invalid number of parameters (${Ha.length}) - expected (${Object.keys(B.ha).toString()}) parameters instead!`);return vb.apply(this,Ha)});var N=Object.create(M,{constructor:{value:v}});v.prototype=N;var B=new Ua(k,v,N,q,x,g,h,n);if(B.aa){var I;(I=B.aa).la??(I.la=[]);B.aa.la.push(B)}x=new fb(k,B,!0,!1,!1);I=new fb(k+\"*\",B,!1,!1,!1);M=new fb(k+\" const*\",B,!1,!0,!1);Qa[b]={pointerType:I,sa:M};gb(r,v);return[x,I,M]})},\nq:function(b,a,c,d,e,g,f,h){b>>>=0;a>>>=0;e>>>=0;g>>>=0;f>>>=0;var m=sb(c,d>>>0);a=G(a);a=tb(a);g=Q(e,g);T([],[b],n=>{function k(){S(`Cannot call ${t} due to unbound types`,m)}n=n[0];var t=`${n.name}.${a}`;a.startsWith(\"@@\")&&(a=Symbol[a.substring(2)]);var q=n.U.constructor;void 0===q[a]?(k.ga=c-1,q[a]=k):(Ra(q,a,t),q[a].Y[c-1]=k);T([],m,r=>{r=rb(t,[r[0],null].concat(r.slice(1)),null,g,f,h);void 0===q[a].Y?(r.ga=c-1,q[a]=r):q[a].Y[c-1]=r;if(n.U.la)for(const v of n.U.la)v.constructor.hasOwnProperty(a)||\n(v.constructor[a]=r);return[]});return[]})},w:function(b,a,c,d,e,g,f,h){b>>>=0;a>>>=0;c>>>=0;d>>>=0;g>>>=0;f>>>=0;h>>>=0;a=G(a);g=Q(e>>>0,g);T([],[b],m=>{m=m[0];var n=`${m.name}.${a}`,k={get(){S(`Cannot access ${n} due to unbound types`,[c])},enumerable:!0,configurable:!0};k.set=h?()=>{S(`Cannot access ${n} due to unbound types`,[c])}:()=>{throw new K(`${n} is a read-only property`);};Object.defineProperty(m.U.constructor,a,k);T([],[c],t=>{t=t[0];var q={get(){return t.W(g(d))},enumerable:!0};h&&(h=\nQ(f,h),q.set=r=>{var v=[];h(d,t.$(v,r));pb(v)});Object.defineProperty(m.U.constructor,a,q);return[]});return[]})},h:function(b,a,c,d,e,g){b>>>=0;d>>>=0;e>>>=0;g>>>=0;var f=sb(a,c>>>0);e=Q(d,e);T([],[b],h=>{h=h[0];var m=`constructor ${h.name}`;void 0===h.U.ha&&(h.U.ha=[]);if(void 0!==h.U.ha[a-1])throw new K(`Cannot register multiple constructors with identical number of parameters (${a-1}) for class '${h.name}'! Overload resolution is currently only performed using the parameter count, not actual type info!`);\nh.U.ha[a-1]=()=>{S(`Cannot construct ${h.name} due to unbound types`,f)};T([],f,n=>{n.splice(1,0,null);h.U.ha[a-1]=rb(m,n,null,e,g);return[]});return[]})},b:function(b,a,c,d,e,g,f,h,m){b>>>=0;a>>>=0;e>>>=0;g>>>=0;f>>>=0;var n=sb(c,d>>>0);a=G(a);a=tb(a);g=Q(e,g);T([],[b],k=>{function t(){S(`Cannot call ${q} due to unbound types`,n)}k=k[0];var q=`${k.name}.${a}`;a.startsWith(\"@@\")&&(a=Symbol[a.substring(2)]);h&&k.U.ya.push(a);var r=k.U.ea,v=r[a];void 0===v||void 0===v.Y&&v.className!==k.name&&v.ga===\nc-2?(t.ga=c-2,t.className=k.name,r[a]=t):(Ra(r,a,q),r[a].Y[c-2]=t);T([],n,x=>{x=rb(q,x,k,g,f,m);void 0===r[a].Y?(x.ga=c-2,r[a]=x):r[a].Y[c-2]=x;return[]});return[]})},r:function(b,a,c,d,e,g,f,h,m,n){b>>>=0;a>>>=0;c>>>=0;e>>>=0;g>>>=0;f>>>=0;h>>>=0;m>>>=0;n>>>=0;a=G(a);e=Q(d>>>0,e);T([],[b],k=>{k=k[0];var t=`${k.name}.${a}`,q={get(){S(`Cannot access ${t} due to unbound types`,[c,f])},enumerable:!0,configurable:!0};q.set=m?()=>S(`Cannot access ${t} due to unbound types`,[c,f]):()=>{throw new K(t+\" is a read-only property\");\n};Object.defineProperty(k.U.ea,a,q);T([],m?[c,f]:[c],r=>{var v=r[0],x={get(){var N=ub(this,k,t+\" getter\");return v.W(e(g,N))},enumerable:!0};if(m){m=Q(h,m);var M=r[1];x.set=function(N){var B=ub(this,k,t+\" setter\"),I=[];m(n,B,M.$(I,N));pb(I)}}Object.defineProperty(k.U.ea,a,x);return[]});return[]})},F:function(b){return L(b>>>0,yb)},t:function(b,a,c,d){function e(){}a=G(a>>>0);e.values={};L(b>>>0,{name:a,constructor:e,W:function(g){return this.constructor.values[g]},$:(g,f)=>f.value,da:zb(a,c>>>0,d),\nba:null});Sa(a,e)},n:function(b,a,c){a>>>=0;var d=Ab(b>>>0,\"enum\");a=G(a);b=d.constructor;d=Object.create(d.constructor.prototype,{value:{value:c},constructor:{value:Pa(`${d.name}_${a}`,function(){})}});b.values[c]=d;b[a]=d},u:function(b,a,c){a=G(a>>>0);L(b>>>0,{name:a,W:d=>d,$:(d,e)=>e,da:Bb(a,c>>>0),ba:null})},m:function(b,a,c,d,e,g,f){b>>>=0;d>>>=0;e>>>=0;g>>>=0;var h=sb(a,c>>>0);b=G(b);b=tb(b);e=Q(d,e);Sa(b,function(){S(`Cannot call ${b} due to unbound types`,h)},a-1);T([],h,m=>{gb(b,rb(b,[m[0],\nnull].concat(m.slice(1)),null,e,g,f),a-1);return[]})},p:function(b,a,c,d,e){b>>>=0;c>>>=0;a=G(a>>>0);let g=h=>h;if(0===d){var f=32-8*c;g=h=>h<<f>>>f;e=g(e)}L(b,{name:a,W:g,$:(h,m)=>m,da:Ja(a,c,0!==d),ba:null})},l:function(b,a,c){function d(g){return new e(ja.buffer,C[g+4>>>2>>>0],C[g>>>2>>>0])}var e=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][a];c=G(c>>>0);L(b>>>0,{name:c,W:d,da:d},{wa:!0})},o:function(b){L(b>>>0,Cb)},\nG:function(b,a){a=G(a>>>0);L(b>>>0,{name:a,W(c){var d=(d=c+4>>>0)?Gb(d,C[c>>>2>>>0]):\"\";R(c);return d},$(c,d){d instanceof ArrayBuffer&&(d=new Uint8Array(d));var e=\"string\"==typeof d;if(!(e||ArrayBuffer.isView(d)&&1==d.BYTES_PER_ELEMENT))throw new K(\"Cannot pass non-string to std::string\");var g=e?Db(d):d.length;var f=ec(4+g+1),h=f+4;C[f>>>2>>>0]=g;e?W(d,h,g+1):w.set(d,h>>>0);null!==c&&c.push(R,f);return f},da:$a,ba(c){R(c)}})},s:function(b,a,c){a>>>=0;c>>>=0;c=G(c);if(2===a){var d=Ib;var e=Jb;var g=\nKb}else d=Lb,e=Mb,g=Nb;L(b>>>0,{name:c,W:f=>{var h=d(f+4,C[f>>>2>>>0]*a,!0);R(f);return h},$:(f,h)=>{if(\"string\"!=typeof h)throw new K(`Cannot pass non-string to C++ string type ${c}`);var m=g(h),n=ec(4+m+a);C[n>>>2>>>0]=m/a;e(h,n+4,m+a);null!==f&&f.push(R,n);return n},da:$a,ba(f){R(f)}})},I:function(b,a){a=G(a>>>0);L(b>>>0,{qa:!0,name:a,W:()=>{},$:()=>{}})},B:()=>{Ba=!1;Ob=0},c:function(b,a,c){var [d,...e]=Rb(b,a>>>0);a=d.$.bind(d);var g=e.map(m=>m.da.bind(m));b--;var f={toValue:V};b=g.map((m,n)=>\n{var k=`argFromPtr${n}`;f[k]=m;return`${k}(args${n?\"+\"+8*n:\"\"})`});switch(c){case 0:var h=\"toValue(handle)\";break;case 2:h=\"new (toValue(handle))\";break;case 3:h=\"\";break;case 1:f.getStringOrSymbol=Ub,h=\"toValue(handle)[getStringOrSymbol(methodName)]\"}h+=`(${b})`;d.qa||(f.toReturnWire=a,f.emval_returnValue=Sb,h=`return emval_returnValue(toReturnWire, destructorsRef, ${h})`);h=`return function (handle, methodName, destructorsRef, args) {\\n  ${h}\\n  }`;c=(new Function(Object.keys(f),h))(...Object.values(f));\nh=`methodCaller<(${e.map(m=>m.name)}) => ${d.name}>`;return Qb(Pa(h,c))},f:xb,j:function(b,a){a>>>=0;b=V(b>>>0);a=V(a);return P(b[a])},i:function(b){b>>>=0;9<b&&(U[b+1]+=1)},e:function(b,a,c,d,e){return Pb[b>>>0](a>>>0,c>>>0,d>>>0,e>>>0)},D:function(){return P([])},k:function(b){return P(Ub(b>>>0))},d:function(b){b>>>=0;var a=V(b);pb(a);xb(b)},C:(b,a)=>{X[b]&&(clearTimeout(X[b].id),delete X[b]);if(!a)return 0;var c=setTimeout(()=>{delete X[b];Xb(()=>dc(b,performance.now()))},a);X[b]={id:c,Ca:a};return 0},\ny:function(b,a,c,d){c>>>=0;d>>>=0;var e=(new Date).getFullYear(),g=(new Date(e,0,1)).getTimezoneOffset();e=(new Date(e,6,1)).getTimezoneOffset();C[b>>>0>>>2>>>0]=60*Math.max(g,e);A[a>>>0>>>2>>>0]=Number(g!=e);a=f=>{var h=Math.abs(f);return`UTC${0<=f?\"-\":\"+\"}${String(Math.floor(h/60)).padStart(2,\"0\")}${String(h%60).padStart(2,\"0\")}`};b=a(g);a=a(e);e<g?(W(b,c,17),W(a,d,17)):(W(b,d,17),W(a,c,17))},J:function(b){b>>>=0;var a=w.length;if(4294901760<b)return!1;for(var c=1;4>=c;c*=2){var d=a*(1+.2/c);d=\nMath.min(d,b+100663296);a:{d=(Math.min(4294901760,65536*Math.ceil(Math.max(b,d)/65536))-ia.buffer.byteLength+65535)/65536|0;try{ia.grow(d);pa();var e=1;break a}catch(g){}e=void 0}if(e)return!0}return!1},z:function(b,a){b>>>=0;a>>>=0;var c=0,d=0,e;for(e of $b()){var g=a+c;C[b+d>>>2>>>0]=g;c+=W(e,g,Infinity)+1;d+=4}return 0},E:function(b,a){b>>>=0;a>>>=0;var c=$b();C[b>>>2>>>0]=c.length;b=0;for(var d of c)b+=Db(d)+1;C[a>>>2>>>0]=b;return 0},A:Wb,x:function(b,a){b>>>=0;bc(w.subarray(b>>>0,b+(a>>>0)>>>\n0));return 0}},Z=await (async function(){function b(c){Z=c.exports;Z=gc();ia=Z.L;pa();ib=Z.S;c=Z;l._main=cc=c.N;nb=c.O;dc=c.P;ec=c.Q;R=c.R;D--;l.monitorRunDependencies?.(D);0==D&&E&&(c=E,E=null,c());return Z}D++;l.monitorRunDependencies?.(D);var a={a:fc};if(l.instantiateWasm)return new Promise(c=>{l.instantiateWasm(a,(d,e)=>{c(b(d,e))})});ra??=Aa(\"\");return b((await ua(a)).instance)}());\nfunction gc(){var b=Z;b=Object.assign({},b);var a=c=>d=>c(d)>>>0;b.O=a(b.O);b.Q=a(b.Q);b._emscripten_stack_alloc=a(b._emscripten_stack_alloc);b.emscripten_stack_get_current=(c=>()=>c()>>>0)(b.emscripten_stack_get_current);return b}\nfunction hc(){function b(){l.calledRun=!0;if(!p){oa=!0;Z.M();fa?.(l);l.onRuntimeInitialized?.();if(!l.noInitialRun){var a=cc;try{var c=a(0,0);u=c;Wb(c)}catch(d){Vb(d)}}if(l.postRun)for(\"function\"==typeof l.postRun&&(l.postRun=[l.postRun]);l.postRun.length;)a=l.postRun.shift(),xa.push(a);wa(xa)}}if(0<D)E=hc;else{if(l.preRun)for(\"function\"==typeof l.preRun&&(l.preRun=[l.preRun]);l.preRun.length;)za();wa(ya);0<D?E=hc:l.setStatus?(l.setStatus(\"Running...\"),setTimeout(()=>{setTimeout(()=>l.setStatus(\"\"),\n1);b()},1)):b()}}if(l.preInit)for(\"function\"==typeof l.preInit&&(l.preInit=[l.preInit]);0<l.preInit.length;)l.preInit.shift()();hc();oa?moduleRtn=l:moduleRtn=new Promise((b,a)=>{fa=b;ha=a});\n;return moduleRtn}export default Module;\n","import { Library } from '../implementation/seal'\n\nexport interface Loader {\n  readonly library: Library\n}\n\n/**\n * Export a default function which instantiates the library\n * @param {Object} bin Emscripten library to initialize\n */\nexport const createLoader = async (\n  bin: () => Promise<Library>\n): Promise<Loader> => ({\n  library: await bin()\n})\n","export const INSTANCE_DELETED = 'Instance was deleted'\nexport const UNSUPPORTED_VECTOR_TYPE = 'Unsupported vector type'\nexport const UNSUPPORTED_BITSIZES_TYPE =\n  'Unsupported argument type! `bitSizes` must be an Int32Array'\nexport const UNSUPPORTED_BATCH_ENCODE_ARRAY_TYPE =\n  'Unsupported array type! `array` must be of type Int32Array, Uint32Array, BigInt64Array, or BigUint64Array.'\nexport const UNSUPPORTED_CKKS_ENCODE_ARRAY_TYPE =\n  'Unsupported array type! `array` must be of type Float64Array.'\nexport const INVALID_PLAIN_CONSRUCTOR_OPTIONS =\n  'Must specify a (coeffCount), (coeffCount, capacity)'\nexport const INVALID_CIPHER_CONSTRUCTOR_OPTIONS =\n  'Must specify a (context), (context, parmsId), or (context, parmsId, sizeCapacity)'\n","interface DisposableResource {\n  delete: () => void\n}\n\ninterface RegistryEntry<T> {\n  resource: T\n}\n\nclass ResourceRegistry {\n  private registry: FinalizationRegistry<RegistryEntry<any>> | undefined =\n    undefined\n\n  constructor() {\n    if (typeof FinalizationRegistry !== 'undefined') {\n      this.registry = new FinalizationRegistry<RegistryEntry<any>>(entry => {\n        try {\n          entry.resource.delete()\n        } catch (error) {\n          // Ignore duplicate calls (manual delete + finalizer)\n        }\n      })\n    }\n  }\n\n  register<T extends DisposableResource>(target: object, resource: T) {\n    if (!this.registry) {\n      return { unregister: () => {}, reregister: () => {} }\n    }\n\n    const token = target\n    const entry: RegistryEntry<T> = { resource }\n\n    this.registry.register(target, entry, token)\n\n    return {\n      unregister: () => {\n        this.registry?.unregister(token)\n      },\n\n      reregister: (newResource: T) => {\n        this.registry?.unregister(token)\n        const newEntry: RegistryEntry<T> = {\n          resource: newResource\n        }\n        this.registry?.register(target, newEntry, token)\n      }\n    }\n  }\n}\n\nconst globalRegistry = new ResourceRegistry()\n\nexport function autoFinalize<T extends DisposableResource>(\n  target: object,\n  resource: T\n) {\n  return globalRegistry.register(target, resource)\n}\n","import { UNSUPPORTED_BATCH_ENCODE_ARRAY_TYPE } from './constants'\nimport { Context } from './context'\nimport { Exception, SealError } from './exception'\nimport { autoFinalize } from './finalizer'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { PlainText, PlainTextConstructorOptions } from './plain-text'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { VectorConstructorOptions } from './vector'\n\nexport interface BatchEncoderDependencyOptions {\n  readonly Exception: Exception\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly PlainText: PlainTextConstructorOptions\n  readonly Vector: VectorConstructorOptions\n}\n\nexport interface BatchEncoderDependencies {\n  ({\n    Exception,\n    MemoryPoolHandle,\n    PlainText,\n    Vector\n  }: BatchEncoderDependencyOptions): BatchEncoderConstructorOptions\n}\n\nexport interface BatchEncoderConstructorOptions {\n  (context: Context): BatchEncoder\n}\n\nexport type BatchEncoderTypes =\n  | Int32Array\n  | Uint32Array\n  | BigInt64Array\n  | BigUint64Array\n\nexport interface BatchEncoder {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly encode: (\n    array: BatchEncoderTypes,\n    plainText?: PlainText\n  ) => PlainText | void\n  readonly decode: (\n    plainText: PlainText,\n    signed?: boolean,\n    pool?: MemoryPoolHandle\n  ) => Int32Array | Uint32Array\n  readonly decodeBigInt: (\n    plainText: PlainText,\n    signed?: boolean,\n    pool?: MemoryPoolHandle\n  ) => BigInt64Array | BigUint64Array\n  readonly slotCount: number\n}\n\nconst BatchEncoderConstructor =\n  (library: Library): BatchEncoderDependencies =>\n  ({\n    Exception,\n    MemoryPoolHandle,\n    PlainText,\n    Vector\n  }: BatchEncoderDependencyOptions): BatchEncoderConstructorOptions =>\n  (context): BatchEncoder => {\n    const Constructor = library.BatchEncoder\n    let _instance: Instance\n    try {\n      _instance = new Constructor(context.instance)\n    } catch (e) {\n      throw Exception.safe(e as SealError)\n    }\n    /**\n     * @implements BatchEncoder\n     */\n\n    /**\n     * @interface BatchEncoder\n     */\n    const self: BatchEncoder = {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name BatchEncoder#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name BatchEncoder#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        self.delete()\n        _instance = instance\n        fin.reregister(_instance)\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name BatchEncoder#delete\n       */\n      delete() {\n        if (!_instance) {\n          return\n        }\n        fin.unregister()\n        _instance.delete()\n        _instance = undefined\n      },\n\n      /**\n       * Creates a PlainText from a given matrix. This function \"batches\" a given matrix\n       * of either signed or unsigned integers modulo the PlainText modulus into a PlainText element, and stores\n       * the result in the destination parameter. The input array must have size at most equal\n       * to the degree of the polynomial modulus. The first half of the elements represent the\n       * first row of the matrix, and the second half represent the second row. The numbers\n       * in the matrix can be at most equal to the PlainText modulus for it to represent\n       * a valid PlainText.\n       *\n       * If the destination PlainText overlaps the input values in memory, the behavior of\n       * this function is undefined.\n       *\n       * @function\n       * @name BatchEncoder#encode\n       * @param {Int32Array|Uint32Array|BigInt64Array|BigUint64Array} array Data to encode\n       * @param {PlainText} [plainText=null] Destination to store the encoded result\n       * @returns {PlainText|void} A new PlainText holding the encoded data or void if one was provided\n       * @example\n       * import SEAL from 'node-seal'\n       * const seal = await SEAL()\n       * ...\n       * const batchEncoder = seal.BatchEncoder(context)\n       *\n       * const plainText = batchEncoder.encode(Int32Array.from([1, -2, 3]))\n       */\n      encode(\n        array: Int32Array | Uint32Array | BigInt64Array | BigUint64Array,\n        plainText?: PlainText\n      ): PlainText | void {\n        try {\n          if (array.constructor === Int32Array) {\n            if (plainText) {\n              _instance.encode(array, plainText.instance, 'INT32')\n              return\n            }\n            const plain = PlainText()\n            _instance.encode(array, plain.instance, 'INT32')\n            return plain\n          }\n\n          if (array.constructor === Uint32Array) {\n            if (plainText) {\n              _instance.encode(array, plainText.instance, 'UINT32')\n              return\n            }\n            const plain = PlainText()\n            _instance.encode(array, plain.instance, 'UINT32')\n            return plain\n          }\n\n          if (array.constructor === BigInt64Array) {\n            // When embind supports BigInt64Arrays we can remove this hack\n            const stringArray = array.toString().split(',')\n            if (plainText) {\n              _instance.encode(stringArray, plainText.instance, 'INT64')\n              return\n            }\n            const plain = PlainText()\n            _instance.encode(stringArray, plain.instance, 'INT64')\n            return plain\n          }\n\n          if (array.constructor === BigUint64Array) {\n            // When embind supports BigInt64Arrays we can remove this hack\n            const stringArray = array.toString().split(',')\n            if (plainText) {\n              _instance.encode(stringArray, plainText.instance, 'UINT64')\n              return\n            }\n            const plain = PlainText()\n            _instance.encode(stringArray, plain.instance, 'UINT64')\n            return plain\n          }\n\n          throw new Error(UNSUPPORTED_BATCH_ENCODE_ARRAY_TYPE)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Inverse of encode. This function \"unbatches\" a given PlainText into a matrix\n       * of signed or unsigned integers modulo the PlainText modulus, and stores the result in the destination\n       * parameter. The input PlainText must have degrees less than the polynomial modulus,\n       * and coefficients less than the PlainText modulus, i.e. it must be a valid PlainText\n       * for the encryption parameters. Dynamic memory allocations in the process are\n       * allocated from the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name BatchEncoder#decode\n       * @param {PlainText} plainText Data to decode\n       * @param {boolean} [signed=true] By default, decode as an Int32Array. If false, decode as an Uint32Array\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}]\n       * @returns {Int32Array|Uint32Array} TypedArray containing the decoded data\n       * @example\n       * import SEAL from 'node-seal'\n       * const seal = await SEAL()\n       * ...\n       * const batchEncoder = seal.BatchEncoder(context)\n       *\n       * const plainText = batchEncoder.encode(Int32Array.from([1, -2, 3]))\n       * const plainTextU = batchEncoder.encode(Uint32Array.from([1, 2, 3]))\n       *\n       * const result = batchEncoder.decode(plainText)\n       * const resultU = batchEncoder.decode(plainTextU, false) // To decode as an Uint32Array\n       */\n      decode(\n        plainText: PlainText,\n        signed = true,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): Int32Array | Uint32Array {\n        try {\n          if (signed) {\n            const tempVect = Vector()\n            const instance = _instance.decodeInt32(plainText.instance, pool)\n            tempVect.unsafeInject(instance)\n            tempVect.setType('Int32Array')\n            const tempArr = tempVect.toArray() as Int32Array\n            tempVect.delete()\n            return tempArr\n          }\n          const tempVect = Vector()\n          const instance = _instance.decodeUint32(plainText.instance, pool)\n          tempVect.unsafeInject(instance)\n          tempVect.setType('Uint32Array')\n          const tempArr = tempVect.toArray() as Uint32Array\n          tempVect.delete()\n          return tempArr\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Performs the same function as the 32-bit decode, but supports true\n       * 64-bit values encapsulated by a BigInt.\n       *\n       * There's no official support for sending a BigInt64Array/BigUint64Array\n       * from C++ to JS, therefore this function uses string conversion to\n       * marshal data which is noticably slower. Use this function if you\n       * absolutely need to marshal values larger than 32 bits.\n       *\n       * @see {@link BatchEncoder#decode} for more information about decode.\n       * @function\n       * @name BatchEncoder#decodeBigInt\n       * @param {PlainText} plainText Data to decode\n       * @param {boolean} [signed=true] By default, decode as an BigInt64Array. If false, decode as an BigUint64Array\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}]\n       * @returns {BigInt64Array|BigUint64Array} TypedArray containing the decoded data\n       * @example\n       * import SEAL from 'node-seal'\n       * const seal = await SEAL()\n       * ...\n       * const batchEncoder = seal.BatchEncoder(context)\n       *\n       * const plainText = batchEncoder.encode(BigInt64Array.from([1n, -2n, 3n]))\n       * const plainTextU = batchEncoder.encode(BigUint64Array.from([1n, 2n, 3n]))\n       *\n       * const result = batchEncoder.decodeBigInt(plainText)\n       * const resultU = batchEncoder.decodeBigInt(plainTextU, false) // To decode as an BigUint64Array\n       */\n      decodeBigInt(\n        plainText: PlainText,\n        signed = true,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): BigInt64Array | BigUint64Array {\n        try {\n          if (signed) {\n            const instance = _instance.decodeBigInt(\n              plainText.instance,\n              true,\n              pool\n            )\n            return BigInt64Array.from(instance)\n          }\n          const instance = _instance.decodeBigInt(\n            plainText.instance,\n            false,\n            pool\n          )\n          return BigUint64Array.from(instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * The total number of batching slots available to hold data\n       *\n       * @readonly\n       * @name BatchEncoder#slotCount\n       * @type {number}\n       */\n      get slotCount() {\n        return _instance.slotCount()\n      }\n    }\n\n    const fin = autoFinalize(self, _instance)\n\n    return self\n  }\n\nexport const BatchEncoderInit = ({\n  loader\n}: LoaderOptions): BatchEncoderDependencies => {\n  const library: Library = loader.library\n  return BatchEncoderConstructor(library)\n}\n","import { ComprModeType } from './compr-mode-type'\nimport { INVALID_CIPHER_CONSTRUCTOR_OPTIONS } from './constants'\nimport { Context } from './context'\nimport { Exception, SealError } from './exception'\nimport { autoFinalize } from './finalizer'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { VectorConstructorOptions } from './vector'\n\nexport interface CipherTextDependencyOptions {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly Vector: VectorConstructorOptions\n}\n\nexport interface CipherTextConstructorParams {\n  context?: Context\n  parmsId?: ParmsIdType\n  sizeCapacity?: number\n  pool?: MemoryPoolHandle\n}\n\nexport type CipherTextDependencies = (\n  deps: CipherTextDependencyOptions\n) => CipherTextConstructorOptions\n\nexport type CipherTextConstructorOptions = (\n  params?: CipherTextConstructorParams\n) => CipherText\n\nexport interface CipherText {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly reserve: (context: Context, capacity: number) => void\n  readonly resize: (size: number) => void\n  readonly release: () => void\n  readonly coeffModulusSize: number\n  readonly polyModulusDegree: number\n  readonly size: number\n  readonly sizeCapacity: number\n  readonly isTransparent: boolean\n  readonly isNttForm: boolean\n  readonly parmsId: ParmsIdType\n  readonly scale: number\n  readonly setScale: (scale: number) => void\n  readonly pool: MemoryPoolHandle\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (cipher: CipherText) => void\n  readonly clone: () => CipherText\n  readonly move: (cipher: CipherText) => void\n}\n\nconst CipherTextConstructor =\n  (library: Library): CipherTextDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    ParmsIdType,\n    MemoryPoolHandle,\n    Vector\n  }: CipherTextDependencyOptions): CipherTextConstructorOptions =>\n  (params: CipherTextConstructorParams = {}): CipherText => {\n    // Static methods\n    const Constructor = library.Ciphertext\n    let _instance = construct(params)\n\n    function construct(constructParams: CipherTextConstructorParams = {}) {\n      const {\n        context,\n        parmsId,\n        sizeCapacity,\n        pool = MemoryPoolHandle.global\n      } = constructParams\n\n      try {\n        if (!context && !parmsId && sizeCapacity === undefined) {\n          return new Constructor(pool)\n        } else if (context && !parmsId && sizeCapacity === undefined) {\n          return new Constructor(context.instance, pool)\n        } else if (context && parmsId && sizeCapacity === undefined) {\n          return new Constructor(context.instance, parmsId.instance, pool)\n        } else if (context && parmsId && sizeCapacity !== undefined) {\n          return new Constructor(\n            context.instance,\n            parmsId.instance,\n            sizeCapacity,\n            pool\n          )\n        } else {\n          throw new Error(INVALID_CIPHER_CONSTRUCTOR_OPTIONS)\n        }\n      } catch (e) {\n        throw Exception.safe(e as SealError)\n      }\n    }\n    /**\n     * @implements CipherText\n     */\n\n    /**\n     * @interface CipherText\n     */\n    const self: CipherText = {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name CipherText#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name CipherText#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        self.delete()\n        _instance = instance\n        fin.reregister(_instance)\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name CipherText#delete\n       */\n      delete() {\n        if (!_instance) {\n          return\n        }\n        fin.unregister()\n        _instance.delete()\n        _instance = undefined\n      },\n\n      /**\n       * Allocates enough memory to accommodate the backing array of a ciphertext\n       * with given capacity. In addition to the capacity, the allocation size is\n       * determined by the current encryption parameters.\n       *\n       * @function\n       * @name CipherText#reserve\n       * @param {Context} context The SEAL Context\n       * @param {number} capacity The capacity to reserve\n       */\n      reserve(context: Context, capacity: number) {\n        try {\n          return _instance.reserve(context.instance, capacity)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Resizes the CipherText to given size, reallocating if the capacity\n       * of the CipherText is too small.\n       *\n       * This function is mainly intended for internal use and is called\n       * automatically by functions such as Evaluator.multiply and\n       * Evaluator.relinearize. A normal user should never have a reason\n       * to manually resize a CipherText.\n       *\n       * @function\n       * @name CipherText#resize\n       * @param {number} size The new size\n       */\n      resize(size: number) {\n        try {\n          return _instance.resize(size)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Resets the CipherText. This function releases any memory allocated\n       * by the CipherText, returning it to the memory pool. It also sets all\n       * encryption parameter specific size information to zero.\n       *\n       * @function\n       * @name CipherText#release\n       */\n      release() {\n        _instance.release()\n      },\n\n      /**\n       * The number of primes in the coefficient modulus of the\n       * associated encryption parameters. This directly affects the\n       * allocation size of the CipherText.\n       *\n       * @readonly\n       * @name CipherText#coeffModulusSize\n       * @type {number}\n       */\n      get coeffModulusSize() {\n        return _instance.coeffModulusSize()\n      },\n\n      /**\n       * The degree of the polynomial modulus of the associated\n       * encryption parameters. This directly affects the allocation size\n       * of the CipherText.\n       *\n       * @readonly\n       * @name CipherText#polyModulusDegree\n       * @type {number}\n       */\n      get polyModulusDegree() {\n        return _instance.polyModulusDegree()\n      },\n\n      /**\n       * The size of the CipherText.\n       *\n       * @readonly\n       * @name CipherText#size\n       * @type {number}\n       */\n      get size() {\n        return _instance.size()\n      },\n\n      /**\n       * The capacity of the allocation. This means the largest size\n       * of the CipherText that can be stored in the current allocation with\n       * the current encryption parameters.\n       *\n       * @readonly\n       * @name CipherText#sizeCapacity\n       * @type {number}\n       */\n      get sizeCapacity() {\n        return _instance.sizeCapacity()\n      },\n\n      /**\n       * Whether the current CipherText is transparent, i.e. does not require\n       * a secret key to decrypt. In typical security models such transparent\n       * CipherTexts would not be considered to be valid. Starting from the second\n       * polynomial in the current CipherText, this function returns true if all\n       * following coefficients are identically zero. Otherwise, returns false.\n       *\n       * @readonly\n       * @name CipherText#isTransparent\n       * @type {boolean}\n       */\n      get isTransparent() {\n        return _instance.isTransparent()\n      },\n\n      /**\n       * Whether the CipherText is in NTT form.\n       *\n       * @readonly\n       * @name CipherText#isNttForm\n       * @type {boolean}\n       */\n      get isNttForm() {\n        return _instance.isNttForm()\n      },\n\n      /**\n       * The reference to parmsId.\n       * @see {@link EncryptionParameters} for more information about parmsId.\n       *\n       * @readonly\n       * @name CipherText#parmsId\n       * @type {ParmsIdType}\n       */\n      get parmsId() {\n        const parms = ParmsIdType()\n        parms.inject(_instance.parmsId())\n        return parms\n      },\n\n      /**\n       * The reference to the scale. This is only needed when using the\n       * CKKS encryption scheme. The user should have little or no reason to ever\n       * change the scale by hand.\n       *\n       * @readonly\n       * @name CipherText#scale\n       * @type {number}\n       */\n      get scale() {\n        return _instance.scale()\n      },\n\n      /**\n       * Sets the CipherText scale. This is only needed when using the\n       * CKKS encryption scheme. The user should have little or no reason to ever\n       * change the scale by hand.\n       *\n       * @function\n       * @name CipherText#setScale\n       * @param {number} scale The scale to set\n       */\n      setScale(scale: number) {\n        _instance.setScale(scale)\n      },\n\n      /**\n       * The currently used MemoryPoolHandle.\n       *\n       * @readonly\n       * @name CipherText#pool\n       * @type {MemoryPoolHandle}\n       */\n      get pool() {\n        return _instance.pool()\n      },\n\n      /**\n       * Save the CipherText to a base64 string\n       *\n       * @function\n       * @name CipherText#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        return _instance.saveToString(compression)\n      },\n\n      /**\n       * Save the CipherText as a binary Uint8Array\n       *\n       * @function\n       * @name CipherText#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the CipherText in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a CipherText from a base64 string\n       *\n       * @function\n       * @name CipherText#load\n       * @param {Context} context Encryption context to enforce\n       * @param {string} encoded Base64 encoded string\n       */\n      load(context: Context, encoded: string) {\n        try {\n          _instance.loadFromString(context.instance, encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a CipherText from an Uint8Array holding binary data\n       *\n       * @function\n       * @name CipherText#loadArray\n       * @param {Context} context Encryption context to enforce\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(context: Context, array: Uint8Array) {\n        try {\n          _instance.loadFromArray(context.instance, array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy an existing CipherText and overwrite this instance\n       *\n       * @function\n       * @name CipherText#copy\n       * @param {CipherText} cipher CipherText to copy\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encoding some data ...\n       * const cipherTextB = seal.CipherText()\n       * cipherTextB.copy(cipherTextA)\n       * // cipherTextB holds a copy of cipherTextA\n       */\n      copy(cipher: CipherText) {\n        try {\n          _instance.copy(cipher.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Clone and return a new instance of this CipherText\n       *\n       * @function\n       * @name CipherText#clone\n       * @returns {CipherText}\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encoding some data ...\n       * const cipherTextB = cipherTextA.clone()\n       * // cipherTextB holds a copy of cipherTextA\n       */\n      clone(): CipherText {\n        try {\n          const clonedInstance = _instance.clone()\n          const cipher = CipherTextConstructor(library)({\n            Exception,\n            ComprModeType,\n            ParmsIdType,\n            MemoryPoolHandle,\n            Vector\n          })()\n          cipher.unsafeInject(clonedInstance)\n          return cipher\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Move a CipherText into this one and delete the old reference\n       *\n       * @function\n       * @name CipherText#move\n       * @param {CipherText} cipher CipherText to move\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encoding some data ...\n       * const cipherTextB = seal.CipherText()\n       * cipherTextB.move(cipherTextA)\n       * // cipherTextB holds a the instance of cipherTextA.\n       * // cipherTextA no longer holds an instance\n       */\n      move(cipher: CipherText) {\n        try {\n          _instance.move(cipher.instance)\n          // TODO: find optimization\n          // This method results in a copy instead of a real move.\n          // Therefore, we need to delete the old instance.\n          cipher.delete()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n\n    const fin = autoFinalize(self, _instance)\n\n    return self\n  }\n\nexport const CipherTextInit = ({\n  loader\n}: LoaderOptions): CipherTextDependencies => {\n  const library: Library = loader.library\n  return CipherTextConstructor(library)\n}\n","import { UNSUPPORTED_CKKS_ENCODE_ARRAY_TYPE } from './constants'\nimport { Context } from './context'\nimport { Exception, SealError } from './exception'\nimport { autoFinalize } from './finalizer'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { PlainText, PlainTextConstructorOptions } from './plain-text'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { VectorConstructorOptions } from './vector'\n\nexport interface CKKSEncoderDependencyOptions {\n  readonly Exception: Exception\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly PlainText: PlainTextConstructorOptions\n  readonly Vector: VectorConstructorOptions\n}\n\nexport interface CKKSEncoderDependencies {\n  ({\n    Exception,\n    MemoryPoolHandle,\n    PlainText,\n    Vector\n  }: CKKSEncoderDependencyOptions): CKKSEncoderConstructorOptions\n}\n\nexport interface CKKSEncoderConstructorOptions {\n  (context: Context): CKKSEncoder\n}\n\nexport type CKKSEncoderTypes = Float64Array\n\nexport interface CKKSEncoder {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly encode: (\n    array: CKKSEncoderTypes,\n    scale: number,\n    plainText?: PlainText,\n    pool?: MemoryPoolHandle\n  ) => PlainText | void\n  readonly decode: (\n    plainText: PlainText,\n    pool?: MemoryPoolHandle\n  ) => CKKSEncoderTypes\n  readonly slotCount: number\n}\n\nconst CKKSEncoderConstructor =\n  (library: Library): CKKSEncoderDependencies =>\n  ({\n    Exception,\n    MemoryPoolHandle,\n    PlainText,\n    Vector\n  }: CKKSEncoderDependencyOptions): CKKSEncoderConstructorOptions =>\n  (context): CKKSEncoder => {\n    const Constructor = library.CKKSEncoder\n    let _instance: Instance\n    try {\n      _instance = new Constructor(context.instance)\n    } catch (e) {\n      throw Exception.safe(e as SealError)\n    }\n    /**\n     * @implements CKKSEncoder\n     */\n\n    /**\n     * @interface CKKSEncoder\n     */\n    const self: CKKSEncoder = {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name CKKSEncoder#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name CKKSEncoder#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        self.delete()\n        _instance = instance\n        fin.reregister(_instance)\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name CKKSEncoder#delete\n       */\n      delete() {\n        if (!_instance) {\n          return\n        }\n        fin.unregister()\n        _instance.delete()\n        _instance = undefined\n      },\n\n      /**\n       * Encodes a vector of double-precision floating-point real numbers\n       * into a plaintext polynomial. Append zeros if vector size is less than N/2.\n       * Dynamic memory allocations in the process are allocated from the memory\n       * pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name CKKSEncoder#encode\n       * @param {Float64Array} array Data to encode\n       * @param {number} scale Scaling parameter defining encoding precision\n       * @param {PlainText} [plainText] Destination to store the encoded result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {PlainText|void} A new PlainText holding the encoded data or void if one was provided\n       * @example\n       * import SEAL from 'node-seal'\n       * const seal = await SEAL()\n       * ...\n       * const ckksEncoder = seal.CKKSEncoder(context)\n       *\n       * const plainText = ckksEncoder.encode(Float64Array.from([1.11, -2.222, 3.333]), Math.pow(2, 20))\n       */\n      encode(\n        array: Float64Array,\n        scale: number,\n        plainText?: PlainText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): PlainText | void {\n        try {\n          if (array.constructor === Float64Array) {\n            if (plainText) {\n              _instance.encode(array, scale, plainText.instance, pool)\n              return\n            }\n            const plain = PlainText()\n            _instance.encode(array, scale, plain.instance, pool)\n            return plain\n          } else {\n            throw new Error(UNSUPPORTED_CKKS_ENCODE_ARRAY_TYPE)\n          }\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Decodes a plaintext polynomial into double-precision floating-point\n       * real numbers. Dynamic memory allocations in the process are\n       * allocated from the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name CKKSEncoder#decode\n       * @param {PlainText} plainText Data to decode\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {Float64Array} TypedArray containing the decoded data\n       * @example\n       * import SEAL from 'node-seal'\n       * const seal = await SEAL()\n       * ...\n       * const ckksEncoder = seal.CKKSEncoder(context)\n       *\n       * const plainText = ckksEncoder.encode(Float64Array.from([1, 2, 3]))\n       *\n       * const result = ckksEncoder.decode(plainText)\n       */\n      decode(\n        plainText: PlainText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): Float64Array {\n        try {\n          const tempVect = Vector()\n          const instance = _instance.decodeDouble(plainText.instance, pool)\n          tempVect.unsafeInject(instance)\n          tempVect.setType('Float64Array')\n          const tempArr = tempVect.toArray() as Float64Array\n          tempVect.delete()\n          return tempArr\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * The total number of CKKS slots available to hold data\n       *\n       * @readonly\n       * @name CKKSEncoder#slotCount\n       * @type {number}\n       */\n      get slotCount() {\n        return _instance.slotCount()\n      }\n    }\n\n    const fin = autoFinalize(self, _instance)\n\n    return self\n  }\n\nexport const CKKSEncoderInit = ({\n  loader\n}: LoaderOptions): CKKSEncoderDependencies => {\n  const library: Library = loader.library\n  return CKKSEncoderConstructor(library)\n}\n","import { UNSUPPORTED_BITSIZES_TYPE } from './constants'\nimport { Exception, SealError } from './exception'\nimport { Library, LoaderOptions } from './seal'\nimport { SecurityLevel } from './security-level'\nimport { Vector, VectorConstructorOptions } from './vector'\n\nexport interface CoeffModulusDependencyOptions {\n  readonly Exception: Exception\n  readonly SecurityLevel: SecurityLevel\n  readonly Vector: VectorConstructorOptions\n}\n\nexport interface CoeffModulusDependencies {\n  ({\n    Exception,\n    SecurityLevel,\n    Vector\n  }: CoeffModulusDependencyOptions): CoeffModulusConstructorOptions\n}\n\nexport interface CoeffModulusConstructorOptions {\n  (): CoeffModulus\n}\n\nexport interface CoeffModulus {\n  readonly MaxBitCount: (\n    polyModulusDegree: number,\n    securityLevel?: SecurityLevel\n  ) => number\n  readonly BFVDefault: (\n    polyModulusDegree: number,\n    securityLevel?: SecurityLevel\n  ) => Vector\n  readonly Create: (polyModulusDegree: number, bitSizes: Int32Array) => Vector\n}\n\nconst CoeffModulusConstructor =\n  (library: Library): CoeffModulusDependencies =>\n  ({\n    Exception,\n    SecurityLevel,\n    Vector\n  }: CoeffModulusDependencyOptions): CoeffModulusConstructorOptions =>\n  (): CoeffModulus => {\n    // Static methods\n    const _MaxBitCount = library.CoeffModulus.MaxBitCount\n    const _BFVDefault = library.CoeffModulus.BFVDefault\n    const _CreateFromArray = library.CoeffModulus.CreateFromArray\n\n    /**\n     * @implements CoeffModulus\n     */\n\n    /**\n     * @interface CoeffModulus\n     */\n    return {\n      /**\n       * Returns the Maximum Bit Count for the specified polyModulusDegree and securityLevel\n       *\n       * @function\n       * @name CoeffModulus.MaxBitCount\n       * @param {number} polyModulusDegree Degree of the polynomial modulus\n       * @param {SecurityLevel} [securityLevel={@link SecurityLevel.tc128}] Security Level\n       * @returns {number} Maximum bit count\n       */\n      MaxBitCount(\n        polyModulusDegree: number,\n        securityLevel: SecurityLevel = SecurityLevel.tc128\n      ): number {\n        return _MaxBitCount(polyModulusDegree, securityLevel)\n      },\n\n      /**\n       * Returns a default vector of primes for the BFV CoeffModulus parameter\n       *\n       * @function\n       * @name CoeffModulus.BFVDefault\n       * @param {number} polyModulusDegree Degree of the polynomial modulus\n       * @param {SecurityLevel} [securityLevel={@link SecurityLevel.tc128}] Security Level\n       * @returns {Vector} Vector containing Modulus primes\n       */\n      BFVDefault(\n        polyModulusDegree: number,\n        securityLevel: SecurityLevel = SecurityLevel.tc128\n      ): Vector {\n        try {\n          const vectorModulus = Vector()\n          const instance = _BFVDefault(polyModulusDegree, securityLevel)\n          vectorModulus.unsafeInject(instance)\n          vectorModulus.setType('Modulus')\n          return vectorModulus\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Creates a vector of primes for a given polyModulusDegree and bitSizes\n       *\n       * @function\n       * @name CoeffModulus.Create\n       * @param {number} polyModulusDegree Degree of the polynomial modulus\n       * @param {Int32Array} bitSizes Int32Array containing values representing\n       * bit-sizes of primes\n       * @returns {Vector} Vector containing Modulus primes\n       */\n      Create(polyModulusDegree: number, bitSizes: Int32Array): Vector {\n        try {\n          if (bitSizes.constructor !== Int32Array) {\n            throw new Error(UNSUPPORTED_BITSIZES_TYPE)\n          }\n          const vectorModulus = Vector()\n          const instance = _CreateFromArray(polyModulusDegree, bitSizes)\n          vectorModulus.unsafeInject(instance)\n          vectorModulus.setType('Modulus')\n          return vectorModulus\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const CoeffModulusInit = ({\n  loader\n}: LoaderOptions): CoeffModulusDependencies => {\n  const library: Library = loader.library\n  return CoeffModulusConstructor(library)\n}\n","import { Library, LoaderOptions } from './seal'\n\nexport interface ComprModeTypeDependencies {\n  (): ComprModeTypeConstructorOptions\n}\n\nexport interface ComprModeTypeConstructorOptions {\n  (): ComprModeType\n}\n\nexport interface ComprModeType {\n  readonly none: any\n  readonly zlib: any\n  readonly zstd: any\n}\n\nconst ComprModeTypeConstructor =\n  (library: Library): ComprModeTypeDependencies =>\n  (): ComprModeTypeConstructorOptions =>\n  (): ComprModeType => {\n    // Static methods\n    const _none = library.ComprModeType.none\n    const _zlib = library.ComprModeType.zlib\n    const _zstd = library.ComprModeType.zstd\n\n    /**\n     * @implements ComprModeType\n     */\n\n    /**\n     * @interface ComprModeType\n     */\n    return {\n      /**\n       * The `none` Compression Mode Type\n       *\n       * @readonly\n       * @name ComprModeType.none\n       * @type {ComprModeType.none}\n       */\n      get none() {\n        /**\n         * @typedef {ComprModeType.none} ComprModeType.none\n         */\n        return _none\n      },\n\n      /**\n       * The `zlib` Compression Mode Type\n       *\n       * @readonly\n       * @name ComprModeType.zlib\n       * @type {ComprModeType.zlib}\n       */\n      get zlib() {\n        /**\n         * @typedef {ComprModeType.zlib} ComprModeType.zlib\n         */\n        return _zlib\n      },\n\n      /**\n       * The `zstd` Compression Mode Type\n       *\n       * @readonly\n       * @name ComprModeType.zstd\n       * @type {ComprModeType.zstd}\n       */\n      get zstd() {\n        /**\n         * @typedef {ComprModeType.zstd} ComprModeType.zstd\n         */\n        return _zstd\n      }\n    }\n  }\n\nexport const ComprModeTypeInit = ({\n  loader\n}: LoaderOptions): ComprModeTypeDependencies => {\n  const library: Library = loader.library\n  return ComprModeTypeConstructor(library)\n}\n","import { ContextData, ContextDataConstructorOptions } from './context-data'\nimport { EncryptionParameters } from './encryption-parameters'\nimport { autoFinalize } from './finalizer'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { SecurityLevel } from './security-level'\n\nexport interface ContextDependencyOptions {\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly ContextData: ContextDataConstructorOptions\n  readonly SecurityLevel: SecurityLevel\n}\n\nexport interface ContextDependencies {\n  ({\n    ParmsIdType,\n    ContextData,\n    SecurityLevel\n  }: ContextDependencyOptions): ContextConstructorOptions\n}\n\nexport interface ContextConstructorOptions {\n  (\n    encryptionParams: EncryptionParameters,\n    expandModChain?: boolean,\n    securityLevel?: SecurityLevel\n  ): Context\n}\n\nexport interface Context {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly toHuman: () => string\n  readonly getContextData: (parmsId: ParmsIdType) => ContextData\n  readonly keyContextData: ContextData\n  readonly firstContextData: ContextData\n  readonly lastContextData: ContextData\n  readonly parametersSet: () => boolean\n  readonly keyParmsId: ParmsIdType\n  readonly firstParmsId: ParmsIdType\n  readonly lastParmsId: ParmsIdType\n  readonly usingKeyswitching: boolean\n}\n\nconst ContextConstructor =\n  (library: Library): ContextDependencies =>\n  ({\n    ParmsIdType,\n    ContextData,\n    SecurityLevel\n  }: ContextDependencyOptions): ContextConstructorOptions =>\n  (\n    encryptionParams,\n    expandModChain = true,\n    securityLevel = SecurityLevel.tc128\n  ): Context => {\n    // Static methods\n    const Constructor = library.SEALContext\n\n    let _instance = new Constructor(\n      encryptionParams.instance,\n      expandModChain,\n      securityLevel\n    ) as Instance\n\n    /**\n     * @implements Context\n     */\n\n    /**\n     * @interface Context\n     */\n    const self: Context = {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Context#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name Context#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        self.delete()\n        _instance = instance\n        fin.reregister(_instance)\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Context#delete\n       */\n      delete() {\n        if (!_instance) {\n          return\n        }\n        fin.unregister()\n        _instance.delete()\n        _instance = undefined\n      },\n\n      /**\n       * Returns the context parameters in a human readable string format.\n       *\n       * @private\n       * @function\n       * @name Context#toString\n       * @returns {string} Context details as a string\n       */\n      toHuman(): string {\n        return _instance.toHuman()\n      },\n\n      /**\n       * Returns the ContextData corresponding to encryption parameters with a given\n       * parmsId. If parameters with the given parmsId are not found then the\n       * function returns nullptr.\n       *\n       * @function\n       * @name Context#getContextData\n       * @param {ParmsIdType} parmsId Specific id to return ContextData for\n       * @returns {ContextData} ContextData corresponding to encryption parameters\n       */\n      getContextData(parmsId: ParmsIdType): ContextData {\n        const instance = _instance.getContextData(parmsId.instance)\n        const contextData = ContextData()\n        contextData.unsafeInject(instance)\n        return contextData\n      },\n\n      /**\n       * The ContextData corresponding to encryption parameters that are used for keys.\n       *\n       * @readonly\n       * @name Context#keyContextData\n       * @type {ContextData}\n       */\n      get keyContextData() {\n        const instance = _instance.keyContextData()\n        const contextData = ContextData()\n        contextData.unsafeInject(instance)\n        return contextData\n      },\n\n      /**\n       * The ContextData corresponding to the first encryption parameters that are used for data.\n       *\n       * @readonly\n       * @name Context#firstContextData\n       * @type {ContextData}\n       */\n      get firstContextData() {\n        const instance = _instance.firstContextData()\n        const contextData = ContextData()\n        contextData.unsafeInject(instance)\n        return contextData\n      },\n\n      /**\n       * Returns the ContextData corresponding to the last encryption parameters that are used for data.\n       *\n       * @readonly\n       * @name Context#lastContextData\n       * @type {ContextData}\n       */\n      get lastContextData() {\n        const instance = _instance.lastContextData()\n        const contextData = ContextData()\n        contextData.unsafeInject(instance)\n        return contextData\n      },\n\n      /**\n       * Whether the encryption parameters are set in a way that is considered valid by\n       * Microsoft SEAL, the variable parameters_set is set to true.\n       *\n       * @function\n       * @name Context#parametersSet\n       * @type {boolean}\n       */\n      parametersSet() {\n        return _instance.parametersSet()\n      },\n\n      /**\n       * Returns a ParmsIdType corresponding to the set of encryption parameters that are used for keys.\n       *\n       * @readonly\n       * @name Context#keyParmsId\n       * @type {ParmsIdType}\n       */\n      get keyParmsId() {\n        const instance = _instance.keyParmsId()\n        const parmsId = ParmsIdType()\n        parmsId.inject(instance)\n        return parmsId\n      },\n\n      /**\n       * Returns a ParmsIdType corresponding to the first encryption parameters that are used for data.\n       *\n       * @readonly\n       * @name Context#firstParmsId\n       * @type {ParmsIdType}\n       */\n      get firstParmsId() {\n        const instance = _instance.firstParmsId()\n        const parmsId = ParmsIdType()\n        parmsId.inject(instance)\n        return parmsId\n      },\n\n      /**\n       * The ParmsIdType corresponding to the last encryption parameters that are used for data.\n       *\n       * @readonly\n       * @name Context#lastParmsId\n       * @type {ParmsIdType}\n       */\n      get lastParmsId() {\n        const instance = _instance.lastParmsId()\n        const parmsId = ParmsIdType()\n        parmsId.inject(instance)\n        return parmsId\n      },\n\n      /**\n       * Whether the coefficient modulus supports keyswitching. In practice,\n       * support for keyswitching is required by Evaluator.relinearize,\n       * Evaluator.applyGalois, and all rotation and conjugation operations. For\n       * keyswitching to be available, the coefficient modulus parameter must consist\n       * of at least two prime number factors.\n       *\n       * @readonly\n       * @name Context#usingKeyswitching\n       * @type {boolean}\n       */\n      get usingKeyswitching() {\n        return _instance.usingKeyswitching()\n      }\n    }\n\n    const fin = autoFinalize(self, _instance)\n\n    return self\n  }\n\nexport const ContextInit = ({ loader }: LoaderOptions): ContextDependencies => {\n  const library: Library = loader.library\n  return ContextConstructor(library)\n}\n","import {\n  EncryptionParameterQualifiers,\n  EncryptionParameterQualifiersConstructorOptions\n} from './encryption-parameter-qualifiers'\nimport {\n  EncryptionParameters,\n  EncryptionParametersConstructorOptions\n} from './encryption-parameters'\nimport { Exception } from './exception'\nimport { autoFinalize } from './finalizer'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\nimport { Instance, Library, LoaderOptions } from './seal'\n\nexport interface ContextDataDependencyOptions {\n  readonly Exception: Exception\n  readonly EncryptionParameters: EncryptionParametersConstructorOptions\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly EncryptionParameterQualifiers: EncryptionParameterQualifiersConstructorOptions\n}\n\nexport interface ContextDataDependencies {\n  ({\n    Exception,\n    EncryptionParameters,\n    ParmsIdType,\n    EncryptionParameterQualifiers\n  }: ContextDataDependencyOptions): ContextDataConstructorOptions\n}\n\nexport interface ContextDataConstructorOptions {\n  (): ContextData\n}\n\nexport interface ContextData {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly parms: EncryptionParameters\n  readonly parmsId: ParmsIdType\n  readonly qualifiers: EncryptionParameterQualifiers\n  readonly totalCoeffModulusBitCount: number\n  readonly prevContextData: ContextData\n  readonly nextContextData: ContextData\n  readonly chainIndex: number\n}\n\nconst ContextDataConstructor =\n  (library: Library): ContextDataDependencies =>\n  ({\n    Exception,\n    EncryptionParameters,\n    ParmsIdType,\n    EncryptionParameterQualifiers\n  }: ContextDataDependencyOptions): ContextDataConstructorOptions =>\n  (): ContextData => {\n    let _instance: Instance\n    /**\n     * @implements ContextData\n     */\n\n    /**\n     * @interface ContextData\n     */\n    const self: ContextData = {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name ContextData#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name ContextData#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        self.delete()\n        _instance = instance\n        fin.reregister(_instance)\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name ContextData#delete\n       */\n      delete() {\n        if (!_instance) {\n          return\n        }\n        fin.unregister()\n        _instance.delete()\n        _instance = undefined\n      },\n\n      /**\n       * Returns a const reference to the underlying encryption parameters.\n       *\n       * @readonly\n       * @name ContextData#parms\n       * @type {EncryptionParameters}\n       */\n      get parms() {\n        const instance = _instance.parms()\n        const encryptionParameters = EncryptionParameters()\n        encryptionParameters.unsafeInject(instance)\n        return encryptionParameters\n      },\n\n      /**\n       * Returns the parmsId of the current parameters.\n       *\n       * @readonly\n       * @name ContextData#parmsId\n       * @type {ParmsIdType}\n       */\n      get parmsId() {\n        const parms = ParmsIdType()\n        parms.inject(_instance.parmsId())\n        return parms\n      },\n\n      /**\n       * Returns a copy of EncryptionParameterQualifiers corresponding to the\n       * current encryption parameters. Note that to change the qualifiers it is\n       * necessary to create a new instance of SEALContext once appropriate changes\n       * to the encryption parameters have been made.\n       *\n       * @readonly\n       * @name ContextData#qualifiers\n       * @type {EncryptionParameterQualifiers}\n       */\n      get qualifiers() {\n        const encParmQualifiers = EncryptionParameterQualifiers()\n        encParmQualifiers.unsafeInject(_instance.qualifiers())\n        return encParmQualifiers\n      },\n\n      /**\n       * Returns the significant bit count of the total coefficient modulus.\n       *\n       * @readonly\n       * @name ContextData#totalCoeffModulusBitCount\n       * @type {number}\n       */\n      get totalCoeffModulusBitCount() {\n        return _instance.totalCoeffModulusBitCount()\n      },\n\n      /**\n       * Returns a shared_ptr to the context data corresponding to the previous parameters\n       * in the modulus switching chain. If the current data is the first one in the\n       * chain, then the result is nullptr.\n       *\n       * @readonly\n       * @name ContextData#prevContextData\n       * @type {ContextData}\n       */\n      get prevContextData() {\n        const cxtData = ContextDataConstructor(library)({\n          Exception,\n          EncryptionParameters,\n          ParmsIdType,\n          EncryptionParameterQualifiers\n        })()\n        cxtData.unsafeInject(_instance.prevContextData())\n        return cxtData\n      },\n\n      /**\n       * Returns a shared_ptr to the context data corresponding to the next parameters\n       * in the modulus switching chain. If the current data is the last one in the\n       * chain, then the result is nullptr.\n       *\n       * @readonly\n       * @name ContextData#nextContextData\n       * @type {ContextData}\n       */\n      get nextContextData() {\n        const cxtData = ContextDataConstructor(library)({\n          Exception,\n          EncryptionParameters,\n          ParmsIdType,\n          EncryptionParameterQualifiers\n        })()\n        cxtData.unsafeInject(_instance.nextContextData())\n        return cxtData\n      },\n\n      /**\n       * Returns the index of the parameter set in a chain. The initial parameters\n       * have index 0 and the index increases sequentially in the parameter chain.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#chainIndex\n       * @type {number}\n       */\n      get chainIndex() {\n        return _instance.chainIndex()\n      }\n    }\n\n    const fin = autoFinalize(self, _instance)\n\n    return self\n  }\n\nexport const ContextDataInit = ({\n  loader\n}: LoaderOptions): ContextDataDependencies => {\n  const library: Library = loader.library\n  return ContextDataConstructor(library)\n}\n","import { CipherText } from './cipher-text'\nimport { Context } from './context'\nimport { Exception, SealError } from './exception'\nimport { autoFinalize } from './finalizer'\nimport { PlainText, PlainTextConstructorOptions } from './plain-text'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { SecretKey } from './secret-key'\n\nexport interface DecryptorDependencyOptions {\n  readonly Exception: Exception\n  readonly PlainText: PlainTextConstructorOptions\n}\n\nexport interface DecryptorDependencies {\n  ({\n    Exception,\n    PlainText\n  }: DecryptorDependencyOptions): DecryptorConstructorOptions\n}\n\nexport interface DecryptorConstructorOptions {\n  (context: Context, secretKey: SecretKey): Decryptor\n}\n\nexport interface Decryptor {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly decrypt: (\n    cipherText: CipherText,\n    plainText?: PlainText\n  ) => PlainText | void\n  readonly invariantNoiseBudget: (cipherText: CipherText) => number\n}\n\nconst DecryptorConstructor =\n  (library: Library): DecryptorDependencies =>\n  ({\n    Exception,\n    PlainText\n  }: DecryptorDependencyOptions): DecryptorConstructorOptions =>\n  (context, secretKey): Decryptor => {\n    const Constructor = library.Decryptor\n    let _instance: Instance\n    try {\n      _instance = new Constructor(context.instance, secretKey.instance)\n    } catch (e) {\n      throw Exception.safe(e as SealError)\n    }\n    /**\n     * @implements Decryptor\n     */\n\n    /**\n     * @interface Decryptor\n     */\n    const self: Decryptor = {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Decryptor#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name Decryptor#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        self.delete()\n        _instance = instance\n        fin.reregister(_instance)\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Decryptor#delete\n       */\n      delete() {\n        if (!_instance) {\n          return\n        }\n        fin.unregister()\n        _instance.delete()\n        _instance = undefined\n      },\n\n      /**\n       * Decrypts a CipherText and stores the result in the destination parameter.\n       *\n       * @function\n       * @name Decryptor#decrypt\n       * @param {CipherText} cipherText CipherText to decrypt\n       * @param {PlainText} [plainText] PlainText destination to store the decrypted result\n       * @returns {PlainText|void} Returns undefined if a PlainText was specified. Otherwise returns a\n       * PlainText containng the decrypted result\n       */\n      decrypt(cipherText: CipherText, plainText?: PlainText): PlainText | void {\n        try {\n          if (plainText) {\n            _instance.decrypt(cipherText.instance, plainText.instance)\n            return\n          }\n          const plain = PlainText()\n          _instance.decrypt(cipherText.instance, plain.instance)\n          return plain\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Computes the invariant noise budget (in bits) of a CipherText. The invariant\n       * noise budget measures the amount of room there is for the noise to grow while\n       * ensuring correct decryptions. This function works only with the BFV scheme.\n       *\n       * @par Invariant Noise Budget\n       * The invariant noise polynomial of a CipherText is a rational coefficient\n       * polynomial, such that a CipherText decrypts correctly as long as the\n       * coefficients of the invariantnoise polynomial are of absolute value less\n       * than 1/2. Thus, we call the infinity-norm of the invariant noise polynomial\n       * the invariant noise, and for correct decryption requireit to be less than\n       * 1/2. If v denotes the invariant noise, we define the invariant noise budget\n       * as -log2(2v). Thus, the invariant noise budget starts from some initial\n       * value, which depends on the encryption parameters, and decreases when\n       * computations are performed. When the budget reaches zero, the CipherText\n       * becomes too noisy to decrypt correctly.\n       *\n       * @function\n       * @name Decryptor#invariantNoiseBudget\n       * @param {CipherText} cipherText CipherText to measure\n       * @returns {number} Invariant noise budget (in bits)\n       */\n      invariantNoiseBudget(cipherText: CipherText): number {\n        try {\n          return _instance.invariantNoiseBudget(cipherText.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n    const fin = autoFinalize(self, _instance)\n\n    return self\n  }\n\nexport const DecryptorInit = ({\n  loader\n}: LoaderOptions): DecryptorDependencies => {\n  const library: Library = loader.library\n  return DecryptorConstructor(library)\n}\n","import { autoFinalize } from './finalizer'\nimport { Instance } from './seal'\nimport { SecurityLevel } from './security-level'\n\nexport interface EncryptionParameterQualifiersDependencies {\n  (): EncryptionParameterQualifiersConstructorOptions\n}\n\nexport interface EncryptionParameterQualifiersConstructorOptions {\n  (): EncryptionParameterQualifiers\n}\n\nexport interface EncryptionParameterQualifiers {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly parametersSet: () => boolean\n  readonly usingFFT: boolean\n  readonly usingNTT: boolean\n  readonly usingBatching: boolean\n  readonly usingFastPlainLift: boolean\n  readonly usingDescendingModulusChain: boolean\n  readonly securityLevel: SecurityLevel\n}\n\nconst EncryptionParameterQualifiersConstructor =\n  (): EncryptionParameterQualifiersDependencies =>\n  (): EncryptionParameterQualifiersConstructorOptions =>\n  (): EncryptionParameterQualifiers => {\n    let _instance: Instance\n    /**\n     * @implements EncryptionParameterQualifiers\n     */\n\n    /**\n     * @interface EncryptionParameterQualifiers\n     */\n    const self: EncryptionParameterQualifiers = {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name EncryptionParameterQualifiers#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name EncryptionParameterQualifiers#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        self.delete()\n        _instance = instance\n        fin.reregister(_instance)\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name EncryptionParameterQualifiers#delete\n       */\n      delete() {\n        if (!_instance) {\n          return\n        }\n        fin.unregister()\n        _instance.delete()\n        _instance = undefined\n      },\n\n      /**\n       * If the encryption parameters are set in a way that is considered valid by\n       * Microsoft SEAL, the variable parameters_set is set to true.\n       *\n       * @function\n       * @name EncryptionParameterQualifiers#parametersSet\n       * @type {boolean}\n       */\n      parametersSet() {\n        return _instance.parametersSet()\n      },\n\n      /**\n       * Tells whether FFT can be used for polynomial multiplication. If the\n       * polynomial modulus is of the form X^N+1, where N is a power of two, then\n       * FFT can be used for fast multiplication of polynomials modulo the polynomial\n       * modulus. In this case the variable using_fft will be set to true. However,\n       * currently Microsoft SEAL requires this to be the case for the parameters\n       * to be valid. Therefore, parameters_set can only be true if using_fft is\n       * true.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#usingFFT\n       * @type {boolean}\n       */\n      get usingFFT() {\n        return _instance.usingFFT\n      },\n\n      /**\n       * Tells whether NTT can be used for polynomial multiplication. If the primes\n       * in the coefficient modulus are congruent to 1 modulo 2N, where X^N+1 is the\n       * polynomial modulus and N is a power of two, then the number-theoretic\n       * transform (NTT) can be used for fast multiplications of polynomials modulo\n       * the polynomial modulus and coefficient modulus. In this case the variable\n       * using_ntt will be set to true. However, currently Microsoft SEAL requires\n       * this to be the case for the parameters to be valid. Therefore, parameters_set\n       * can only be true if using_ntt is true.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#usingNTT\n       * @type {boolean}\n       */\n      get usingNTT() {\n        return _instance.usingNTT\n      },\n\n      /**\n       * Tells whether batching is supported by the encryption parameters. If the\n       * plaintext modulus is congruent to 1 modulo 2N, where X^N+1 is the polynomial\n       * modulus and N is a power of two, then it is possible to use the BatchEncoder\n       * class to view plaintext elements as 2-by-(N/2) matrices of integers modulo\n       * the plaintext modulus. This is called batching, and allows the user to\n       * operate on the matrix elements (slots) in a SIMD fashion, and rotate the\n       * matrix rows and columns. When the computation is easily vectorizable, using\n       * batching can yield a huge performance boost. If the encryption parameters\n       * support batching, the variable using_batching is set to true.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#usingBatching\n       * @type {boolean}\n       */\n      get usingBatching() {\n        return _instance.usingBatching\n      },\n\n      /**\n       * Tells whether fast plain lift is supported by the encryption parameters.\n       * A certain performance optimization in multiplication of a ciphertext by\n       * a plaintext (Evaluator::multiply_plain) and in transforming a plaintext\n       * element to NTT domain (Evaluator::transform_to_ntt) can be used when the\n       * plaintext modulus is smaller than each prime in the coefficient modulus.\n       * In this case the variable using_fast_plain_lift is set to true.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#usingFastPlainLift\n       * @type {boolean}\n       */\n      get usingFastPlainLift() {\n        return _instance.usingFastPlainLift\n      },\n\n      /**\n       * Tells whether the coefficient modulus consists of a set of primes that\n       * are in decreasing order. If this is true, certain modular reductions in\n       * base conversion can be omitted, improving performance.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#usingDescendingModulusChain\n       * @type {boolean}\n       */\n      get usingDescendingModulusChain() {\n        return _instance.usingDescendingModulusChain\n      },\n\n      /**\n       * Tells whether the encryption parameters are secure based on the standard\n       * parameters from HomomorphicEncryption.org security standard.\n       *\n       * @readonly\n       * @name EncryptionParameterQualifiers#securityLevel\n       * @type {(SecurityLevel.none|SecurityLevel.tc128|SecurityLevel.tc192|SecurityLevel.tc256)}\n       */\n      get securityLevel() {\n        return _instance.securityLevel\n      }\n    }\n\n    const fin = autoFinalize(self, _instance)\n\n    return self\n  }\n\nexport const EncryptionParameterQualifiersInit =\n  (): EncryptionParameterQualifiersDependencies => {\n    return EncryptionParameterQualifiersConstructor()\n  }\n","import { ComprModeType } from './compr-mode-type'\nimport { Exception, SealError } from './exception'\nimport { autoFinalize } from './finalizer'\nimport { Modulus, ModulusConstructorOptions } from './modulus'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\nimport { SchemeType } from './scheme-type'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { Vector, VectorConstructorOptions } from './vector'\n\nexport interface EncryptionParametersDependencyOptions {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Modulus: ModulusConstructorOptions\n  readonly SchemeType: SchemeType\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly Vector: VectorConstructorOptions\n}\n\nexport interface EncryptionParametersDependencies {\n  ({\n    Exception,\n    ComprModeType,\n    Modulus,\n    SchemeType,\n    Vector\n  }: EncryptionParametersDependencyOptions): EncryptionParametersConstructorOptions\n}\n\nexport interface EncryptionParametersConstructorOptions {\n  (schemeType?: SchemeType): EncryptionParameters\n}\n\nexport interface EncryptionParameters {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly setPolyModulusDegree: (polyModulusDegree: number) => void\n  readonly setCoeffModulus: (coeffModulus: Vector) => void\n  readonly setPlainModulus: (plainModulus: Modulus) => void\n  readonly scheme: SchemeType\n  readonly polyModulusDegree: number\n  readonly coeffModulus: BigUint64Array\n  readonly plainModulus: Modulus\n  readonly parmsId: ParmsIdType\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (encoded: string) => void\n  readonly loadArray: (array: Uint8Array) => void\n}\n\nconst EncryptionParametersConstructor =\n  (library: Library): EncryptionParametersDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    Modulus,\n    SchemeType,\n    ParmsIdType,\n    Vector\n  }: EncryptionParametersDependencyOptions): EncryptionParametersConstructorOptions =>\n  (schemeType: SchemeType = SchemeType.none): EncryptionParameters => {\n    const Constructor = library.EncryptionParameters\n    let _instance = new Constructor(schemeType)\n\n    /**\n     * @implements EncryptionParameters\n     */\n\n    /**\n     * @interface EncryptionParameters\n     */\n    const self: EncryptionParameters = {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name EncryptionParameters#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name EncryptionParameters#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        self.delete()\n        _instance = instance\n        fin.reregister(_instance)\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name EncryptionParameters#delete\n       */\n      delete() {\n        if (!_instance) {\n          return\n        }\n        fin.unregister()\n        _instance.delete()\n        _instance = undefined\n      },\n\n      /**\n       * Sets the degree of the polynomial modulus parameter to the specified value.\n       * The polynomial modulus directly affects the number of coefficients in\n       * PlainText polynomials, the size of CipherText elements, the computational\n       * performance of the scheme (bigger is worse), and the security level (bigger\n       * is better). In Microsoft SEAL the degree of the polynomial modulus must be a power\n       * of 2 (e.g.  1024, 2048, 4096, 8192, 16384, or 32768).\n       *\n       * @function\n       * @name EncryptionParameters#setPolyModulusDegree\n       * @param {number} polyModulusDegree The degree of the polynomial modulus\n       */\n      setPolyModulusDegree(polyModulusDegree: number) {\n        try {\n          _instance.setPolyModulusDegree(polyModulusDegree)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Sets the coefficient modulus parameter. The coefficient modulus consists\n       * of a list of distinct prime numbers, and is represented by a vector of\n       * Modulus objects. The coefficient modulus directly affects the size\n       * of CipherText elements, the amount of computation that the scheme can perform\n       * (bigger is better), and the security level (bigger is worse). In Microsoft SEAL each\n       * of the prime numbers in the coefficient modulus must be at most 60 bits,\n       * and must be congruent to 1 modulo 2*degree(poly_modulus).\n       *\n       * @function\n       * @name EncryptionParameters#setCoeffModulus\n       * @param {Vector} coeffModulus Vector of Modulus primes\n       */\n      setCoeffModulus(coeffModulus: Vector) {\n        try {\n          _instance.setCoeffModulus(coeffModulus.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Sets the PlainText modulus parameter. The PlainText modulus is an integer\n       * modulus represented by the Modulus class. The PlainText modulus\n       * determines the largest coefficient that PlainText polynomials can represent.\n       * It also affects the amount of computation that the scheme can perform\n       * (bigger is worse). In Microsoft SEAL the PlainText modulus can be at most 60 bits\n       * long, but can otherwise be any integer. Note, however, that some features\n       * (e.g. batching) require the PlainText modulus to be of a particular form.\n       *\n       * @function\n       * @name EncryptionParameters#setPlainModulus\n       * @param {Modulus} plainModulus PlainText modulus parameter\n       */\n      setPlainModulus(plainModulus: Modulus) {\n        try {\n          _instance.setPlainModulus(plainModulus.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * The encryption scheme type.\n       *\n       * @readonly\n       * @name EncryptionParameters#scheme\n       * @type {SchemeType.none|SchemeType.bfv|SchemeType.ckks}\n       */\n      get scheme() {\n        return _instance.scheme()\n      },\n\n      /**\n       * The degree of the polynomial modulus parameter.\n       *\n       * @readonly\n       * @name EncryptionParameters#polyModulusDegree\n       * @type {number}\n       */\n      get polyModulusDegree() {\n        return _instance.polyModulusDegree()\n      },\n\n      /**\n       * Returns the currently set coefficient modulus parameter.\n       *\n       * @readonly\n       * @name EncryptionParameters#coeffModulus\n       * @type {BigUint64Array}\n       */\n      get coeffModulus() {\n        const tempVect = Vector()\n        const instance = _instance.coeffModulus()\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Modulus')\n        const tempArr = tempVect.toArray() as BigUint64Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Returns the currently set PlainText modulus parameter.\n       *\n       * @readonly\n       * @name EncryptionParameters#plainModulus\n       * @type {Modulus}\n       */\n      get plainModulus() {\n        const instance = _instance.plainModulus()\n        const smallModulus = Modulus(BigInt(0))\n        smallModulus.inject(instance)\n        return smallModulus\n      },\n\n      /**\n       * Returns the ParmsId of the current parameters.\n       *\n       * @readonly\n       * @name EncryptionParameters#parmsId\n       * @type {ParmsIdType}\n       */\n      get parmsId() {\n        const parms = ParmsIdType()\n        parms.inject(_instance.parmsId())\n        return parms\n      },\n\n      /**\n       * Save the Encryption Parameters to a base64 string\n       *\n       * @function\n       * @name EncryptionParameters#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        return _instance.saveToString(compression)\n      },\n\n      /**\n       * Save the Encryption Parameters as a binary Uint8Array\n       *\n       * @function\n       * @name EncryptionParameters#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the CipherText in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load the Encryption Parameters from a base64 string\n       *\n       * @function\n       * @name EncryptionParameters#load\n       * @param {string} encoded base64 encoded string\n       */\n      load(encoded: string) {\n        try {\n          _instance.loadFromString(encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load the Encryption Parameters from an Uint8Array holding binary data\n       *\n       * @function\n       * @name EncryptionParameters#loadArray\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(array: Uint8Array) {\n        try {\n          _instance.loadFromArray(array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n    const fin = autoFinalize(self, _instance)\n\n    return self\n  }\n\nexport const EncryptionParametersInit = ({\n  loader\n}: LoaderOptions): EncryptionParametersDependencies => {\n  const library: Library = loader.library\n  return EncryptionParametersConstructor(library)\n}\n","import { CipherText, CipherTextConstructorOptions } from './cipher-text'\nimport { Context } from './context'\nimport { Exception, SealError } from './exception'\nimport { autoFinalize } from './finalizer'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { PlainText } from './plain-text'\nimport { PublicKey } from './public-key'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { SecretKey } from './secret-key'\nimport { Serializable, SerializableConstructorOptions } from './serializable'\n\nexport interface EncryptorDependencyOptions {\n  readonly Exception: Exception\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly CipherText: CipherTextConstructorOptions\n  readonly Serializable: SerializableConstructorOptions\n}\n\nexport interface EncryptorDependencies {\n  ({\n    Exception,\n    MemoryPoolHandle,\n    CipherText,\n    Serializable\n  }: EncryptorDependencyOptions): EncryptorConstructorOptions\n}\n\nexport interface EncryptorConstructorOptions {\n  (context: Context, publicKey: PublicKey, secretKey?: SecretKey): Encryptor\n}\n\nexport interface Encryptor {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly encrypt: (\n    plainText: PlainText,\n    cipherText?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly encryptSerializable: (\n    plainText: PlainText,\n    pool?: MemoryPoolHandle\n  ) => Serializable\n  readonly encryptSymmetric: (\n    plainText: PlainText,\n    cipherText?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly encryptSymmetricSerializable: (\n    plainText: PlainText,\n    pool?: MemoryPoolHandle\n  ) => Serializable\n  readonly encryptZero: (\n    cipherText?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly encryptZeroSerializable: (pool?: MemoryPoolHandle) => Serializable\n}\n\nconst EncryptorConstructor =\n  (library: Library): EncryptorDependencies =>\n  ({\n    Exception,\n    MemoryPoolHandle,\n    CipherText,\n    Serializable\n  }: EncryptorDependencyOptions): EncryptorConstructorOptions =>\n  (context, publicKey, secretKey): Encryptor => {\n    const Constructor = library.Encryptor\n    let _instance = constructInstance(context, publicKey, secretKey)\n\n    function constructInstance(\n      context: Context,\n      publicKey: PublicKey,\n      secretKey?: SecretKey\n    ) {\n      try {\n        if (secretKey) {\n          return new Constructor(\n            context.instance,\n            publicKey.instance,\n            secretKey.instance\n          )\n        }\n        return new Constructor(context.instance, publicKey.instance)\n      } catch (e) {\n        throw Exception.safe(e as SealError)\n      }\n    }\n    /**\n     * @implements Encryptor\n     */\n\n    /**\n     * @interface Encryptor\n     */\n    const self: Encryptor = {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Encryptor#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name Encryptor#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        self.delete()\n        _instance = instance\n        fin.reregister(_instance)\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Encryptor#delete\n       */\n      delete() {\n        if (!_instance) {\n          return\n        }\n        fin.unregister()\n        _instance.delete()\n        _instance = undefined\n      },\n\n      /**\n       * Encrypts a PlainText and stores the result in the destination parameter.\n       * Dynamic memory allocations in the process are allocated from the memory\n       * pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Encryptor#encrypt\n       * @param {PlainText} plainText PlainText to encrypt\n       * @param {CipherText} [cipherText] CipherText destination to store the encrypted result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} Returns undefined if a CipherText was specified. Otherwise returns a\n       * CipherText containing the encrypted result\n       */\n      encrypt(\n        plainText: PlainText,\n        cipherText?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (cipherText) {\n            _instance.encrypt(plainText.instance, cipherText.instance, pool)\n            return\n          }\n          const cipher = CipherText()\n          _instance.encrypt(plainText.instance, cipher.instance, pool)\n          return cipher\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Encrypts a PlainText and returns a CipherText as a Serializable object.\n       * Dynamic memory allocations in the process are allocated from the memory\n       * pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Encryptor#encryptSerializable\n       * @param {PlainText} plainText PlainText to encrypt\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {Serializable<CipherText>} A Serializable containing the encrypted result\n       */\n      encryptSerializable(\n        plainText: PlainText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): Serializable {\n        try {\n          const temp = Serializable()\n          const instance = _instance.encryptSerializable(\n            plainText.instance,\n            pool\n          )\n          temp.unsafeInject(instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Encrypts a PlainText with the secret key and stores the result in\n       * destination.\n       *\n       * The encryption parameters for the resulting CipherText\n       * correspond to:\n       * 1) in BFV or BGV, the highest (data) level in the modulus switching chain,\n       * 2) in CKKS, the encryption parameters of the plaintext.\n       * Dynamic memory allocations in the process are allocated from the memory\n       * pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Encryptor#encryptSymmetric\n       * @param {PlainText} plainText PlainText to encrypt\n       * @param {CipherText} [cipherText] CipherText destination to store the encrypted result.\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} Returns undefined if a CipherText was specified. Otherwise returns a\n       * CipherText containing the encrypted result\n       */\n      encryptSymmetric(\n        plainText: PlainText,\n        cipherText?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (cipherText) {\n            _instance.encryptSymmetric(\n              plainText.instance,\n              cipherText.instance,\n              pool\n            )\n            return\n          }\n          const cipher = CipherText()\n          _instance.encryptSymmetric(plainText.instance, cipher.instance, pool)\n          return cipher\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Encrypts a plaintext with the secret key and returns the ciphertext as\n       * a serializable object.\n       *\n       * The encryption parameters for the resulting CipherText\n       * correspond to:\n       * 1) in BFV or BGV, the highest (data) level in the modulus switching chain,\n       * 2) in CKKS, the encryption parameters of the plaintext.\n       * Dynamic memory allocations in the process are allocated from the memory\n       * pool pointed to by the given MemoryPoolHandle.\n       *\n       * Half of the ciphertext data is pseudo-randomly generated from a seed to\n       * reduce the object size. The resulting serializable object cannot be used\n       * directly and is meant to be serialized for the size reduction to have an\n       * impact.\n       *\n       * @function\n       * @name Encryptor#encryptSymmetricSerializable\n       * @param {PlainText} plainText PlainText to encrypt\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {Serializable<CipherText>} Returns a Serializable containing the encrypted result\n       */\n      encryptSymmetricSerializable(\n        plainText: PlainText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): Serializable {\n        try {\n          const serialized = Serializable()\n          const instance = _instance.encryptSymmetricSerializable(\n            plainText.instance,\n            pool\n          )\n          serialized.unsafeInject(instance)\n          return serialized\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Encrypts a zero plaintext with the public key and returns the ciphertext\n       * as a serializable object.\n       *\n       * The encryption parameters for the resulting ciphertext correspond to the\n       * highest (data) level in the modulus switching chain. Dynamic memory\n       * allocations in the process are allocated from the memory pool pointed to\n       * by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Encryptor#encryptZero\n       * @param {CipherText} [cipherText] A CipherText to overwrite.\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} Returns undefined if a CipherText was specified. Otherwise returns a\n       * CipherText containing the encrypted result\n       */\n      encryptZero(\n        cipherText?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (cipherText) {\n            _instance.encryptZero(cipherText.instance, pool)\n            return\n          }\n          const cipher = CipherText()\n          _instance.encryptZero(cipher.instance, pool)\n          return cipher\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Encrypts a zero plaintext with the public key and stores the result in\n       * destination.\n       *\n       * The encryption parameters for the resulting ciphertext correspond to the\n       * highest (data) level in the modulus switching chain. Dynamic memory\n       * allocations in the process are allocated from the memory pool pointed to\n       * by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Encryptor#encryptZeroSerializable\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {Serializable<CipherText>} A CipherText as a serialized object containing the encrypted result\n       */\n      encryptZeroSerializable(\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): Serializable {\n        try {\n          const serialized = Serializable()\n          const instance = _instance.encryptZeroSerializable(pool)\n          serialized.unsafeInject(instance)\n          return serialized\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n\n    const fin = autoFinalize(self, _instance)\n\n    return self\n  }\n\nexport const EncryptorInit = ({\n  loader\n}: LoaderOptions): EncryptorDependencies => {\n  const library: Library = loader.library\n  return EncryptorConstructor(library)\n}\n","import { CipherText, CipherTextConstructorOptions } from './cipher-text'\nimport { Context } from './context'\nimport { Exception, SealError } from './exception'\nimport { autoFinalize } from './finalizer'\nimport { GaloisKeys } from './galois-keys'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { ParmsIdType } from './parms-id-type'\nimport { PlainText, PlainTextConstructorOptions } from './plain-text'\nimport { RelinKeys } from './relin-keys'\nimport { SchemeType } from './scheme-type'\nimport { Instance, Library, LoaderOptions } from './seal'\n\nexport interface EvaluatorDependencyOptions {\n  readonly Exception: Exception\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly CipherText: CipherTextConstructorOptions\n  readonly PlainText: PlainTextConstructorOptions\n}\n\nexport interface EvaluatorDependencies {\n  ({\n    Exception,\n    MemoryPoolHandle,\n    CipherText,\n    PlainText\n  }: EvaluatorDependencyOptions): EvaluatorConstructorOptions\n}\n\nexport interface EvaluatorConstructorOptions {\n  (context: Context): Evaluator\n}\n\nexport interface Evaluator {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly negate: (\n    encrypted: CipherText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly add: (\n    a: CipherText,\n    b: CipherText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly sub: (\n    a: CipherText,\n    b: CipherText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly multiply: (\n    a: CipherText,\n    b: CipherText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly square: (\n    encrypted: CipherText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly relinearize: (\n    encrypted: CipherText,\n    relinKeys: RelinKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly cipherModSwitchToNext: (\n    encrypted: CipherText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly cipherModSwitchTo: (\n    encrypted: CipherText,\n    parmsId: ParmsIdType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly plainModSwitchToNext: (\n    plain: PlainText,\n    destination?: PlainText\n  ) => PlainText | void\n  readonly plainModSwitchTo: (\n    plain: PlainText,\n    parmsId: ParmsIdType,\n    destination?: PlainText\n  ) => PlainText | void\n  readonly rescaleToNext: (\n    encrypted: CipherText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly rescaleTo: (\n    encrypted: CipherText,\n    parmsId: ParmsIdType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly modReduceToNext: (\n    encrypted: CipherText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly modReduceTo: (\n    encrypted: CipherText,\n    parmsId: ParmsIdType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly exponentiate: (\n    encrypted: CipherText,\n    exponent: number,\n    relinKeys: RelinKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly addPlain: (\n    encrypted: CipherText,\n    plain: PlainText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly subPlain: (\n    encrypted: CipherText,\n    plain: PlainText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly multiplyPlain: (\n    encrypted: CipherText,\n    plain: PlainText,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly plainTransformToNtt: (\n    plain: PlainText,\n    parmsId: ParmsIdType,\n    destinationNtt?: PlainText,\n    pool?: MemoryPoolHandle\n  ) => PlainText | void\n  readonly cipherTransformToNtt: (\n    encrypted: CipherText,\n    destinationNtt?: CipherText\n  ) => CipherText | void\n  readonly cipherTransformFromNtt: (\n    encryptedNtt: CipherText,\n    destination?: CipherText\n  ) => CipherText | void\n  readonly applyGalois: (\n    encrypted: CipherText,\n    galoisElt: number,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly rotateRows: (\n    encrypted: CipherText,\n    steps: number,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly rotateColumns: (\n    encrypted: CipherText,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly rotateVector: (\n    encrypted: CipherText,\n    steps: number,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly complexConjugate: (\n    encrypted: CipherText,\n    galoisKeys: GaloisKeys,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly sumElements: (\n    encrypted: CipherText,\n    galoisKeys: GaloisKeys,\n    scheme: SchemeType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly dotProduct: (\n    a: CipherText,\n    b: CipherText,\n    relinKeys: RelinKeys,\n    galoisKeys: GaloisKeys,\n    scheme: SchemeType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n  readonly dotProductPlain: (\n    a: CipherText,\n    b: PlainText,\n    galoisKeys: GaloisKeys,\n    scheme: SchemeType,\n    destination?: CipherText,\n    pool?: MemoryPoolHandle\n  ) => CipherText | void\n}\n\nconst EvaluatorConstructor =\n  (library: Library): EvaluatorDependencies =>\n  ({\n    Exception,\n    MemoryPoolHandle,\n    CipherText,\n    PlainText\n  }: EvaluatorDependencyOptions): EvaluatorConstructorOptions =>\n  (context): Evaluator => {\n    const Constructor = library.Evaluator\n    let _instance: Instance\n    try {\n      _instance = new Constructor(context.instance)\n    } catch (e) {\n      throw Exception.safe(e as SealError)\n    }\n    /**\n     * @implements Evaluator\n     */\n\n    /**\n     * @interface Evaluator\n     */\n    const self: Evaluator = {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Evaluator#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name Evaluator#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        self.delete()\n        _instance = instance\n        fin.reregister(_instance)\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Evaluator#delete\n       */\n      delete() {\n        if (!_instance) {\n          return\n        }\n        fin.unregister()\n        _instance.delete()\n        _instance = undefined\n      },\n\n      /**\n       * Negates a CipherText and stores the result in the destination parameter.\n       *\n       * @function\n       * @name Evaluator#negate\n       * @param {CipherText} encrypted CipherText to negate\n       * @param {CipherText} [destination] CipherText to store the negated results\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherText = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.negate(cipherText)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.negate(encrypted, cipherDest)\n       */\n      negate(\n        encrypted: CipherText,\n        destination?: CipherText\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.negate(encrypted.instance, destination.instance)\n            return\n          }\n          const temp = CipherText()\n          _instance.negate(encrypted.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Adds two CipherTexts. This function adds together a and b\n       * and stores the result in the destination parameter.\n       *\n       * @function\n       * @name Evaluator#add\n       * @param {CipherText} a CipherText operand A\n       * @param {CipherText} b CipherText operand B\n       * @param {CipherText} [destination] CipherText destination to store the sum\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * const cipherTextB = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.add(cipherTextA, cipherTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.add(cipherTextA, cipherTextB, cipherDest)\n       */\n      add(\n        a: CipherText,\n        b: CipherText,\n        destination?: CipherText\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.add(a.instance, b.instance, destination.instance)\n            return\n          }\n          const temp = CipherText()\n          _instance.add(a.instance, b.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Subtracts two CipherTexts. This function computes the difference of a\n       * and b and stores the result in the destination parameter.\n       *\n       * @function\n       * @name Evaluator#sub\n       * @param {CipherText} a CipherText operand A\n       * @param {CipherText} b CipherText operand B\n       * @param {CipherText} [destination] CipherText destination to store the difference\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * const cipherTextB = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.sub(cipherTextA, cipherTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.sub(cipherTextA, cipherTextB, cipherDest)\n       */\n      sub(\n        a: CipherText,\n        b: CipherText,\n        destination?: CipherText\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.sub(a.instance, b.instance, destination.instance)\n            return\n          }\n          const temp = CipherText()\n          _instance.sub(a.instance, b.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Multiplies two CipherTexts. This functions computes the product of a\n       * and b and stores the result in the destination parameter. Dynamic\n       * memory allocations in the process are allocated from the memory pool pointed\n       * to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#multiply\n       * @param {CipherText} a CipherText operand A\n       * @param {CipherText} b CipherText operand B\n       * @param {CipherText} [destination] CipherText destination to store the product\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * const cipherTextB = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.multiply(cipherTextA, cipherTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.multiply(cipherTextA, cipherTextB, cipherDest)\n       */\n      multiply(\n        a: CipherText,\n        b: CipherText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.multiply(\n              a.instance,\n              b.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.multiply(a.instance, b.instance, temp.instance, pool)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Squares a CipherText. This functions computes the square of encrypted and\n       * stores the result in the destination parameter. Dynamic memory allocations\n       * in the process are allocated from the memory pool pointed to by the given\n       * MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#square\n       * @param {CipherText} encrypted CipherText to square\n       * @param {CipherText} [destination] CipherText destination to store the squared result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.square(cipherTextA, cipherTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.square(cipherTextA, cipherDest)\n       */\n      square(\n        encrypted: CipherText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.square(encrypted.instance, destination.instance, pool)\n            return\n          }\n          const temp = CipherText()\n          _instance.square(encrypted.instance, temp.instance, pool)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Relinearizes a CipherText. This functions relinearizes encrypted, reducing\n       * its size down to 2, and stores the result in the destination parameter.\n       * If the size of encrypted is K+1, the given relinearization keys need to\n       * have size at least K-1. Dynamic memory allocations in the process are allocated\n       * from the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#relinearize\n       * @param {CipherText} encrypted CipherText to relinearize\n       * @param {RelinKeys} relinKeys RelinKey used to perform relinearization\n       * @param {CipherText} [destination] CipherText destination to store the relinearized result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const relinKeys = keyGenerator.createRelinKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.relinearize(cipherTextA, relinKeys)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.relinearize(cipherTextA, relinKeys, cipherDest)\n       */\n      relinearize(\n        encrypted: CipherText,\n        relinKeys: RelinKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.relinearize(\n              encrypted.instance,\n              relinKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.relinearize(\n            encrypted.instance,\n            relinKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given a CipherText encrypted modulo q_1...q_k, this function switches the\n       * modulus down to q_1...q_{k-1} and stores the result in the destination\n       * parameter. Dynamic memory allocations in the process are allocated from\n       * the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#cipherModSwitchToNext\n       * @param {CipherText} encrypted CipherText to switch its modulus down\n       * @param {CipherText} [destination] CipherText destination to store the switched result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.cipherModSwitchToNext(cipherTextA)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.cipherModSwitchToNext(cipherTextA, cipherDest)\n       */\n      cipherModSwitchToNext(\n        encrypted: CipherText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.cipherModSwitchToNext(\n              encrypted.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.cipherModSwitchToNext(\n            encrypted.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given a CipherText encrypted modulo q_1...q_k, this function switches the\n       * modulus down until the parameters reach the given parmsId and stores the\n       * result in the destination parameter. Dynamic memory allocations in the process\n       * are allocated from the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#cipherModSwitchTo\n       * @param {CipherText} encrypted CipherText to switch its modulus down\n       * @param {ParmsIdType} parmsId Target parmsId to switch to\n       * @param {CipherText} [destination] CipherText destination to store the switched result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const context = seal.Context(encParms, true)\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const parmsId = context.lastParmsId\n       * const resultCipher = evaluator.cipherModSwitchTo(cipherTextA, parmsId)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.cipherModSwitchTo(cipherTextA, parmsId, cipherDest)\n       */\n      cipherModSwitchTo(\n        encrypted: CipherText,\n        parmsId: ParmsIdType,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.cipherModSwitchTo(\n              encrypted.instance,\n              parmsId.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.cipherModSwitchTo(\n            encrypted.instance,\n            parmsId.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Modulus switches an NTT transformed PlainText from modulo q_1...q_k down\n       * to modulo q_1...q_{k-1} and stores the result in the destination parameter.\n       *\n       * @function\n       * @name Evaluator#plainModSwitchToNext\n       * @param {PlainText} plain PlainText to switch its modulus down\n       * @param {PlainText} [destination] PlainText destination to store the switched result\n       * @returns {PlainText|void} PlainText containing the result or void if a destination was supplied\n       * @example\n       * const plainTextA = seal.PlainText()\n       * // ... after encoding some data ...\n       * const resultCipher = evaluator.plainModSwitchToNext(plainTextA)\n       * // or\n       * const plainDest = seal.PlainText()\n       * evaluator.plainModSwitchToNext(plainTextA, plainDest)\n       */\n      plainModSwitchToNext(\n        plain: PlainText,\n        destination?: PlainText\n      ): PlainText | void {\n        try {\n          if (destination) {\n            _instance.plainModSwitchToNext(plain.instance, destination.instance)\n            return\n          }\n          const temp = PlainText()\n          _instance.plainModSwitchToNext(plain.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given an NTT transformed PlainText modulo q_1...q_k, this function switches\n       * the modulus down until the parameters reach the given parmsId and stores\n       * the result in the destination parameter.\n       *\n       * @function\n       * @name Evaluator#plainModSwitchTo\n       * @param {PlainText} plain PlainText to switch its modulus down\n       * @param {ParmsIdType} parmsId Target parmsId to switch to\n       * @param {PlainText} [destination] PlainText destination to store the switched result\n       * @returns {PlainText|void} PlainText containing the result or void if a destination was supplied\n       * @example\n       * const context = seal.Context(encParms, true)\n       * const plainTextA = seal.PlainText()\n       * // ... after encoding some data ...\n       * const parmsId = context.lastParmsId\n       * const resultCipher = evaluator.plainModSwitchTo(plainTextA, parmsId)\n       * // or\n       * const plainDest = seal.PlainText()\n       * evaluator.plainModSwitchTo(plainTextA, parmsId, plainDest)\n       */\n      plainModSwitchTo(\n        plain: PlainText,\n        parmsId: ParmsIdType,\n        destination?: PlainText\n      ): PlainText | void {\n        try {\n          if (destination) {\n            _instance.plainModSwitchTo(\n              plain.instance,\n              parmsId.instance,\n              destination.instance\n            )\n            return\n          }\n          const temp = PlainText()\n          _instance.plainModSwitchTo(\n            plain.instance,\n            parmsId.instance,\n            temp.instance\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given a CipherText encrypted modulo q_1...q_k, this function switches the\n       * modulus down to q_1...q_{k-1}, scales the message down accordingly, and\n       * stores the result in the destination parameter. Dynamic memory allocations\n       * in the process are allocated from the memory pool pointed to by the given\n       * MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#rescaleToNext\n       * @param {CipherText} encrypted CipherText to rescale\n       * @param {CipherText} [destination] CipherText destination to store the rescaled result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.rescaleToNext(cipherTextA)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.rescaleToNext(cipherTextA, cipherDest)\n       */\n      rescaleToNext(\n        encrypted: CipherText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.rescaleToNext(\n              encrypted.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.rescaleToNext(encrypted.instance, temp.instance, pool)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given a CipherText encrypted modulo q_1...q_k, this function switches the\n       * modulus down until the parameters reach the given parmsId, scales the message\n       * down accordingly, and stores the result in the destination parameter. Dynamic\n       * memory allocations in the process are allocated from the memory pool pointed\n       * to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#rescaleTo\n       * @param {CipherText} encrypted CipherText to rescale\n       * @param {ParmsIdType} parmsId Target parmsId to rescale to\n       * @param {CipherText} [destination] CipherText destination to store the rescaled result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const context = seal.Context(encParms, true)\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const parmsId = context.lastParmsId\n       * const resultCipher = evaluator.rescaleTo(cipherTextA, parmsId)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.rescaleTo(cipherTextA, parmsId, cipherDest)\n       */\n      rescaleTo(\n        encrypted: CipherText,\n        parmsId: ParmsIdType,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.rescaleTo(\n              encrypted.instance,\n              parmsId.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.rescaleTo(\n            encrypted.instance,\n            parmsId.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given a ciphertext encrypted modulo q_1...q_k, this function switches\n       * the modulus down to q_1...q_{k-1}, scales the message down accordingly,\n       * and stores the result in the destination parameter. Dynamic memory\n       * allocations in the process are allocated from the memory pool pointed\n       * to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#modReduceToNext\n       * @param {CipherText} encrypted CipherText to reduce\n       * @param {CipherText} [destination] CipherText destination to store the\n       * reduced result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}]\n       * MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if\n       * a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.modReduceToNext(cipherTextA)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.modReduceToNext(cipherTextA, cipherDest)\n       */\n      modReduceToNext(\n        encrypted: CipherText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.modReduceToNext(\n              encrypted.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.modReduceToNext(encrypted.instance, temp.instance, pool)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Given a ciphertext encrypted modulo q_1...q_k, this function reduces\n       * the modulus down until the parameters reach the given parms_id and\n       * stores the result in the destination parameter. Dynamic memory\n       * allocations in the process are allocated from the memory pool pointed\n       * to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#modReduceTo\n       * @param {CipherText} encrypted CipherText to reduce\n       * @param {ParmsIdType} parmsId Target parmsId to reduce to\n       * @param {CipherText} [destination] CipherText destination to store the\n       * reduced result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}]\n       * MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if\n       * a destination was supplied\n       * @example\n       * const context = seal.Context(encParms, true)\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const parmsId = context.lastParmsId\n       * const resultCipher = evaluator.modReduceTo(cipherTextA, parmsId)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.modReduceTo(cipherTextA, parmsId, cipherDest)\n       */\n      modReduceTo(\n        encrypted: CipherText,\n        parmsId: ParmsIdType,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.modReduceTo(\n              encrypted.instance,\n              parmsId.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.modReduceTo(\n            encrypted.instance,\n            parmsId.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Exponentiates a CipherText. This functions raises encrypted to a power and\n       * stores the result in the destination parameter. Dynamic memory allocations\n       * in the process are allocated from the memory pool pointed to by the given\n       * MemoryPoolHandle. The exponentiation is done in a depth-optimal order, and\n       * relinearization is performed automatically after every multiplication in\n       * the process. In relinearization the given relinearization keys are used.\n       *\n       * @function\n       * @name Evaluator#exponentiate\n       * @param {CipherText} encrypted CipherText to exponentiate\n       * @param {number} exponent Positive integer to exponentiate the CipherText\n       * @param {RelinKeys} relinKeys RelinKeys used to perform relinearization after each exponentiation\n       * @param {CipherText} [destination] CipherText destination to store the exponentiated result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const relinKeys = keyGenerator.createRelinKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.exponentiate(cipherTextA, 3, relinKeys)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.exponentiate(cipherTextA, 3, relinKeys, cipherDest)\n       */\n      exponentiate(\n        encrypted: CipherText,\n        exponent: number,\n        relinKeys: RelinKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.exponentiate(\n              encrypted.instance,\n              exponent,\n              relinKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.exponentiate(\n            encrypted.instance,\n            exponent,\n            relinKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Adds a CipherText and a PlainText. This function adds a CipherText and\n       * a PlainText and stores the result in the destination parameter. The PlainText\n       * must be valid for the current encryption parameters.\n       *\n       * @function\n       * @name Evaluator#addPlain\n       * @param {CipherText} encrypted CipherText operand A\n       * @param {PlainText} plain PlainText operand B\n       * @param {CipherText} [destination] CipherText destination to store the sum\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * const plainTextB = seal.PlainText()\n       * // ... after encrypting/encoding some data ...\n       * const resultCipher = evaluator.addPlain(cipherTextA, plainTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.addPlain(cipherTextA, plainTextB, cipherDest)\n       */\n      addPlain(\n        encrypted: CipherText,\n        plain: PlainText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.addPlain(\n              encrypted.instance,\n              plain.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.addPlain(\n            encrypted.instance,\n            plain.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Subtracts a PlainText from a CipherText. This function subtracts a PlainText\n       * from a CipherText and stores the result in the destination parameter. The\n       * PlainText must be valid for the current encryption parameters.\n       *\n       * @function\n       * @name Evaluator#subPlain\n       * @param {CipherText} encrypted CipherText operand A\n       * @param {PlainText} plain PlainText operand B\n       * @param {CipherText} [destination] CipherText destination to store the difference\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * const plainTextB = seal.PlainText()\n       * // ... after encrypting/encoding some data ...\n       * const resultCipher = evaluator.subPlain(cipherTextA, plainTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.subPlain(cipherTextA, plainTextB, cipherDest)\n       */\n      subPlain(\n        encrypted: CipherText,\n        plain: PlainText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.subPlain(\n              encrypted.instance,\n              plain.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.subPlain(\n            encrypted.instance,\n            plain.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Multiplies a CipherText with a PlainText. This function multiplies\n       * a CipherText with a PlainText and stores the result in the destination\n       * parameter. The PlainText must be a valid for the current encryption parameters,\n       * and cannot be identially 0. Dynamic memory allocations in the process are\n       * allocated from the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#multiplyPlain\n       * @param {CipherText} encrypted CipherText operand A\n       * @param {PlainText} plain PlainText operand B\n       * @param {CipherText} [destination] CipherText destination to store the product\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText?} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * const plainTextB = seal.PlainText()\n       * // ... after encrypting/encoding some data ...\n       * const resultCipher = evaluator.multiplyPlain(cipherTextA, plainTextB)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.multiplyPlain(cipherTextA, plainTextB, cipherDest)\n       */\n      multiplyPlain(\n        encrypted: CipherText,\n        plain: PlainText,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.multiplyPlain(\n              encrypted.instance,\n              plain.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.multiplyPlain(\n            encrypted.instance,\n            plain.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Transforms a PlainText to NTT domain. This functions applies the number\n       * Theoretic Transform to a PlainText by first embedding integers modulo the\n       * PlainText modulus to integers modulo the coefficient modulus and then\n       * performing David Harvey's NTT on the resulting polynomial. The transformation\n       * is done with respect to encryption parameters corresponding to a given\n       * parmsId. The result is stored in the destinationNtt parameter. For the\n       * operation to be valid, the PlainText must have degree less than PolyModulusDegree\n       * and each coefficient must be less than the PlainText modulus, i.e., the PlainText\n       * must be a valid PlainText under the current encryption parameters. Dynamic\n       * memory allocations in the process are allocated from the memory pool pointed\n       * to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#plainTransformToNtt\n       * @param {PlainText} plain PlainText to transform\n       * @param {ParmsIdType} parmsId target parmsId to perform NTT transformation\n       * @param {PlainText} [destinationNtt] PlainText destination to store the transformed result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {PlainText|void} PlainText containing the result or void if a destination was supplied\n       * @example\n       * const context = seal.Context(encParms, true)\n       * const plainTextA = seal.PlainText()\n       * // ... after encoding some data ...\n       * const parmsId = context.lastParmsId\n       * const resultCipher = evaluator.plainTransformToNtt(plainTextA, parmsId)\n       * // or\n       * const plainDest = seal.PlainText()\n       * evaluator.plainTransformToNtt(plainTextA, parmsId, plainDest)\n       */\n      plainTransformToNtt(\n        plain: PlainText,\n        parmsId: ParmsIdType,\n        destinationNtt?: PlainText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): PlainText | void {\n        try {\n          if (destinationNtt) {\n            _instance.plainTransformToNtt(\n              plain.instance,\n              parmsId.instance,\n              destinationNtt.instance,\n              pool\n            )\n            return\n          }\n          const temp = PlainText()\n          _instance.plainTransformToNtt(\n            plain.instance,\n            parmsId.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Transforms a CipherText to NTT domain. This functions applies David Harvey's\n       * number Theoretic Transform separately to each polynomial of a CipherText.\n       * The result is stored in the destinationNtt parameter.\n       *\n       * @function\n       * @name Evaluator#cipherTransformToNtt\n       * @param {CipherText} encrypted CipherText to transform\n       * @param {CipherText} [destinationNtt] CipherText destination to store the transformed result\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.cipherTransformToNtt(cipherTextA)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.cipherTransformToNtt(cipherTextA, cipherDest)\n       */\n      cipherTransformToNtt(\n        encrypted: CipherText,\n        destinationNtt?: CipherText\n      ): CipherText | void {\n        try {\n          if (destinationNtt) {\n            _instance.cipherTransformToNtt(\n              encrypted.instance,\n              destinationNtt.instance\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.cipherTransformToNtt(encrypted.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Transforms a CipherText back from NTT domain. This functions applies the\n       * inverse of David Harvey's number Theoretic Transform separately to each\n       * polynomial of a CipherText. The result is stored in the destination parameter.\n       *\n       * @function\n       * @name Evaluator#cipherTransformFromNtt\n       * @param {CipherText} encryptedNtt CipherText to transform\n       * @param {CipherText} [destination] CipherText destination to store the transformed result\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * // ... after cipherTransformToNtt ...\n       * const resultCipher = evaluator.cipherTransformFromNtt(cipherTextANtt)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.cipherTransformFromNtt(cipherTextANtt, cipherDest)\n       */\n      cipherTransformFromNtt(\n        encryptedNtt: CipherText,\n        destination?: CipherText\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.cipherTransformFromNtt(\n              encryptedNtt.instance,\n              destination.instance\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.cipherTransformFromNtt(encryptedNtt.instance, temp.instance)\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Applies a Galois automorphism to a CipherText and writes the result to the\n       * destination parameter. To evaluate the Galois automorphism, an appropriate\n       * set of Galois keys must also be provided. Dynamic memory allocations in\n       * the process are allocated from the memory pool pointed to by the given\n       * MemoryPoolHandle.\n       *\n       * The desired Galois automorphism is given as a Galois element, and must be\n       * an odd integer in the interval [1, M-1], where M = 2*N, and N = degree(poly_modulus).\n       * Used with batching, a Galois element 3^i % M corresponds to a cyclic row\n       * rotation i steps to the left, and a Galois element 3^(N/2-i) % M corresponds\n       * to a cyclic row rotation i steps to the right. The Galois element M-1 corresponds\n       * to a column rotation (row swap) in BFV, and complex conjugation in CKKS.\n       * In the polynomial view (not batching), a Galois automorphism by a Galois\n       * element p changes Enc(plain(x)) to Enc(plain(x^p)).\n       *\n       * @function\n       * @name Evaluator#applyGalois\n       * @param {CipherText} encrypted CipherText to apply the automorphism\n       * @param {number} galoisElt number representing the Galois element\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {CipherText} [destination] CipherText destination to store the result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * ...\n       * const evaluator = seal.Evaluator(context)\n       * const arr = Int32Array.from({ length: encoder.slotCount }, (_, i) => i)\n       * const plain = encoder.encode(arr)\n       * const cipher = encryptor.encrypt(plain)\n       * const cipherDest = seal.CipherText()\n       * const galElt = 2 * parms.polyModulusDegree - 1\n       * evaluator.applyGalois(cipher, galElt, galoisKeys, cipherDest)\n       */\n      applyGalois(\n        encrypted: CipherText,\n        galoisElt: number,\n        galoisKeys: GaloisKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.applyGalois(\n              encrypted.instance,\n              galoisElt,\n              galoisKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.applyGalois(\n            encrypted.instance,\n            galoisElt,\n            galoisKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Rotates PlainText matrix rows cyclically. When batching is used with the\n       * BFV/BGV scheme, this function rotates the encrypted PlainText matrix rows\n       * cyclically to the left (steps > 0) or to the right (steps < 0) and writes\n       * the result to the destination parameter. Since the size of the batched\n       * matrix is 2-by-(N/2), where N is the degree of the polynomial modulus,\n       * the number of steps to rotate must have absolute value at most N/2-1. Dynamic\n       * memory allocations in the process are allocated from the memory pool pointed\n       * to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#rotateRows\n       * @param {CipherText} encrypted CipherText to rotate rows\n       * @param {number} steps Int representing steps to rotate (negative = right, positive = left)\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {CipherText} [destination] CipherText destination to store the rotated result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.rotateRows(cipherTextA, 3, galoisKeys)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.rotateRows(cipherTextA, 3, galoisKeys, cipherDest)\n       */\n      rotateRows(\n        encrypted: CipherText,\n        steps: number,\n        galoisKeys: GaloisKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.rotateRows(\n              encrypted.instance,\n              steps,\n              galoisKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.rotateRows(\n            encrypted.instance,\n            steps,\n            galoisKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Rotates PlainText matrix columns cyclically. When batching is used with\n       * the BFV scheme, this function rotates the encrypted PlainText matrix columns\n       * cyclically, and writes the result to the destination parameter. Since the\n       * size of the batched matrix is 2-by-(N/2), where N is the degree of the\n       * polynomial modulus, this means simply swapping the two rows. Dynamic memory\n       * allocations in the process are allocated from the memory pool pointed to\n       * by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#rotateColumns\n       * @param {CipherText} encrypted CipherText to rotate columns\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {CipherText} [destination] CipherText destination to store the rotated result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.rotateColumns(cipherTextA, galoisKeys)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.rotateColumns(cipherTextA, galoisKeys, cipherDest)\n       */\n      rotateColumns(\n        encrypted: CipherText,\n        galoisKeys: GaloisKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.rotateColumns(\n              encrypted.instance,\n              galoisKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.rotateColumns(\n            encrypted.instance,\n            galoisKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Rotates PlainText vector cyclically. When using the CKKS scheme, this function\n       * rotates the encrypted PlainText vector cyclically to the left (steps > 0)\n       * or to the right (steps < 0) and writes the result to the destination parameter.\n       * Since the size of the batched matrix is 2-by-(N/2), where N is the degree\n       * of the polynomial modulus, the number of steps to rotate must have absolute\n       * value at most N/2-1. Dynamic memory allocations in the process are allocated\n       * from the memory pool pointed to by the given MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#rotateVector\n       * @param {CipherText} encrypted CipherText to rotate the entire vector\n       * @param {number} steps Int representing steps to rotate (negative = right, positive = left)\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {CipherText} [destination] CipherText destination to store the rotated result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.rotateVector(cipherTextA, 3, galoisKeys)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.rotateVector(cipherTextA, 3, galoisKeys, cipherDest)\n       */\n      rotateVector(\n        encrypted: CipherText,\n        steps: number,\n        galoisKeys: GaloisKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.rotateVector(\n              encrypted.instance,\n              steps,\n              galoisKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.rotateVector(\n            encrypted.instance,\n            steps,\n            galoisKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Complex conjugates PlainText slot values. When using the CKKS scheme, this\n       * function complex conjugates all values in the underlying PlainText, and\n       * writes the result to the destination parameter. Dynamic memory allocations\n       * in the process are allocated from the memory pool pointed to by the given\n       * MemoryPoolHandle.\n       *\n       * @function\n       * @name Evaluator#complexConjugate\n       * @param {CipherText} encrypted CipherText to complex conjugate\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {CipherText} [destination] CipherText destination to store the conjugated result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.complexConjugate(cipherTextA, galoisKeys)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.complexConjugate(cipherTextA, galoisKeys, cipherDest)\n       */\n      complexConjugate(\n        encrypted: CipherText,\n        galoisKeys: GaloisKeys,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.complexConjugate(\n              encrypted.instance,\n              galoisKeys.instance,\n              destination.instance,\n              pool\n            )\n            return\n          }\n          const temp = CipherText()\n          _instance.complexConjugate(\n            encrypted.instance,\n            galoisKeys.instance,\n            temp.instance,\n            pool\n          )\n          return temp\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Sum all elements in the encrypted CipherText. The resulting CipherText contains the sum in every element.\n       *\n       * @function\n       * @name Evaluator#sumElements\n       * @param {CipherText} encrypted CipherText to sum elements\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {SchemeType} scheme Scheme that was used for encryption\n       * @param {CipherText} [destination] CipherText destination to store the result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.sumElements(cipherTextA, galoisKeys, seal.SchemeTypes.BFV)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.sumElements(cipherTextA, galoisKeys, seal.SchemeTypes.BFV, cipherDest)\n       */\n      sumElements(\n        encrypted: CipherText,\n        galoisKeys: GaloisKeys,\n        scheme: SchemeType,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.sumElements(\n              encrypted.instance,\n              galoisKeys.instance,\n              scheme,\n              destination.instance,\n              pool\n            )\n            return\n          }\n\n          const newDest = CipherText()\n          _instance.sumElements(\n            encrypted.instance,\n            galoisKeys.instance,\n            scheme,\n            newDest.instance,\n            pool\n          )\n          return newDest\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Perform the dot product (A.B) of two CipherTexts The resulting CipherText contains the dot product in every\n       * element.\n       *\n       * @function\n       * @name Evaluator#dotProduct\n       * @param {CipherText} a CipherText operand A\n       * @param {CipherText} b CipherText operand B\n       * @param {RelinKeys} relinKeys RelinKeys used to perform relinearization after multiplication\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {SchemeType} scheme Scheme that was used for encryption\n       * @param {CipherText} [destination] CipherText destination to store the result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const relinKeys = keyGenerator.createRelinKeys()\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * const cipherTextB = seal.CipherText()\n       * // ... after encrypting some data ...\n       * const resultCipher = evaluator.dotProduct(cipherTextA, cipherTextB, relinKeys, galoisKeys, seal.SchemeTypes.BFV)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.dotProduct(cipherTextA, cipherTextB, relinKeys, galoisKeys, seal.SchemeTypes.BFV, cipherDest)\n       */\n      dotProduct(\n        a: CipherText,\n        b: CipherText,\n        relinKeys: RelinKeys,\n        galoisKeys: GaloisKeys,\n        scheme: SchemeType,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.multiply(\n              a.instance,\n              b.instance,\n              destination.instance,\n              pool\n            )\n            _instance.relinearize(\n              destination.instance,\n              relinKeys.instance,\n              destination.instance,\n              pool\n            )\n            _instance.sumElements(\n              destination.instance,\n              galoisKeys.instance,\n              scheme,\n              destination.instance,\n              pool\n            )\n            return\n          }\n\n          const newDest = CipherText()\n          _instance.multiply(a.instance, b.instance, newDest.instance, pool)\n          _instance.relinearize(\n            newDest.instance,\n            relinKeys.instance,\n            newDest.instance,\n            pool\n          )\n          _instance.sumElements(\n            newDest.instance,\n            galoisKeys.instance,\n            scheme,\n            newDest.instance,\n            pool\n          )\n          return newDest\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Perform the dot product (A.B) of CipherText (A) and PlainText (B). The resulting CipherText contains the dot\n       * product in every element.\n       *\n       * @function\n       * @name Evaluator#dotProductPlain\n       * @param {CipherText} a CipherText operand A\n       * @param {PlainText} b PlainText operand B\n       * @param {GaloisKeys} galoisKeys GaloisKeys used to perform rotations\n       * @param {SchemeType} scheme Scheme that was used for encryption\n       * @param {CipherText} [destination] CipherText destination to store the result\n       * @param {MemoryPoolHandle} [pool={@link MemoryPoolHandle.global}] MemoryPool to use\n       * @returns {CipherText|void} CipherText containing the result or void if a destination was supplied\n       * @example\n       * const galoisKeys = keyGenerator.createGaloisKeys()\n       * const cipherTextA = seal.CipherText()\n       * const plainTextB = seal.PlainText()\n       * // ... after encoding / encrypting some data ...\n       * const resultCipher = evaluator.dotProductPlain(cipherTextA, plainTextB, galoisKeys, seal.SchemeTypes.BFV)\n       * // or\n       * const cipherDest = seal.CipherText()\n       * evaluator.dotProductPlain(cipherTextA, plainTextB, galoisKeys, seal.SchemeTypes.BFV, cipherDest)\n       */\n      dotProductPlain(\n        a: CipherText,\n        b: PlainText,\n        galoisKeys: GaloisKeys,\n        scheme: SchemeType,\n        destination?: CipherText,\n        pool: MemoryPoolHandle = MemoryPoolHandle.global\n      ): CipherText | void {\n        try {\n          if (destination) {\n            _instance.multiplyPlain(\n              a.instance,\n              b.instance,\n              destination.instance,\n              pool\n            )\n            _instance.sumElements(\n              destination.instance,\n              galoisKeys.instance,\n              scheme,\n              destination.instance,\n              pool\n            )\n            return\n          }\n\n          const newDest = CipherText()\n          _instance.multiplyPlain(\n            a.instance,\n            b.instance,\n            newDest.instance,\n            pool\n          )\n          _instance.sumElements(\n            newDest.instance,\n            galoisKeys.instance,\n            scheme,\n            newDest.instance,\n            pool\n          )\n          return newDest\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n\n    const fin = autoFinalize(self, _instance)\n\n    return self\n  }\n\nexport const EvaluatorInit = ({\n  loader\n}: LoaderOptions): EvaluatorDependencies => {\n  const library: Library = loader.library\n  return EvaluatorConstructor(library)\n}\n","import { Library, LoaderOptions } from './seal'\n\nexport interface ExceptionDependencies {\n  (): ExceptionConstructorOptions\n}\n\nexport interface ExceptionConstructorOptions {\n  (): Exception\n}\n\nexport type SealError = number | Error | string\n\nexport interface Exception {\n  readonly safe: (e: SealError) => Error\n}\n\nconst ExceptionConstructor =\n  (library: Library): ExceptionDependencies =>\n  (): ExceptionConstructorOptions =>\n  (): Exception => {\n    // Static methods\n    const _getException = library.getException\n\n    /**\n     * @implements Exception\n     */\n\n    /**\n     * @interface Exception\n     */\n    return {\n      /**\n       * Takes a caught exception in SEAL library and gets a safe error string\n       *\n       * @function\n       * @name Exception.safe\n       * @param {(number|Error|string)} error Unsafe error to normalize\n       * @returns {Error}\n       */\n      safe(error: number | Error | string): Error {\n        if (typeof error === 'number') {\n          return new Error(_getException(error))\n        }\n\n        if (error instanceof Error) {\n          return error\n        }\n        return new Error(error || 'Unknown Error!')\n      }\n    }\n  }\n\nexport const ExceptionInit = ({\n  loader\n}: LoaderOptions): ExceptionDependencies => {\n  const library: Library = loader.library\n  return ExceptionConstructor(library)\n}\n","import { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\nimport { Exception, SealError } from './exception'\nimport { autoFinalize } from './finalizer'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { VectorConstructorOptions } from './vector'\n\nexport interface GaloisKeysDependencyOptions {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport interface GaloisKeysDependencies {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: GaloisKeysDependencyOptions): GaloisKeysConstructorOptions\n}\n\nexport interface GaloisKeysConstructorOptions {\n  (): GaloisKeys\n}\n\nexport interface GaloisKeys {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly size: number\n  readonly getIndex: (galoisElt: number) => number\n  readonly hasKey: (galoisElt: number) => boolean\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (key: GaloisKeys) => void\n  readonly clone: () => GaloisKeys\n  readonly move: (key: GaloisKeys) => void\n}\n\nconst GaloisKeysConstructor =\n  (library: Library): GaloisKeysDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: GaloisKeysDependencyOptions): GaloisKeysConstructorOptions =>\n  (): GaloisKeys => {\n    const Constructor = library.GaloisKeys\n    let _instance = new Constructor()\n\n    /**\n     * @implements GaloisKeys\n     */\n\n    /**\n     * @interface GaloisKeys\n     */\n    const self: GaloisKeys = {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name GaloisKeys#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance\n       *\n       * @private\n       * @function\n       * @name GaloisKeys#inject\n       * @param {Instance} instance WASM instance\n       */\n      inject(instance: Instance) {\n        self.delete()\n        _instance = new Constructor(instance)\n        fin.reregister(_instance)\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name GaloisKeys#delete\n       */\n      delete() {\n        if (!_instance) {\n          return\n        }\n        fin.unregister()\n        _instance.delete()\n        _instance = undefined\n      },\n\n      /**\n       * Returns the current number of keyswitching keys. Only keys that are\n       * non-empty are counted.\n       *\n       * @readonly\n       * @name GaloisKeys#size\n       * @type {number}\n       */\n      get size() {\n        return _instance.size()\n      },\n\n      /**\n       * Returns the index of a Galois key in the backing KSwitchKeys instance that\n       * corresponds to the given Galois element, assuming that it exists in the\n       * backing KSwitchKeys.\n       *\n       * @function\n       * @name GaloisKeys#getIndex\n       * @param {number} galoisElt The Galois element\n       * @returns {number} The index of the galois element\n       */\n      getIndex(galoisElt: number): number {\n        try {\n          return _instance.getIndex(galoisElt)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Returns whether a Galois key corresponding to a given Galois element exists.\n       *\n       * @function\n       * @name GaloisKeys#hasKey\n       * @param {number} galoisElt The Galois element\n       * @returns {boolean} True if the key exists\n       */\n      hasKey(galoisElt: number): boolean {\n        try {\n          return _instance.hasKey(galoisElt)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n      /**\n       * Save the Encryption Parameters to a base64 string\n       *\n       * @function\n       * @name GaloisKeys#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        try {\n          return _instance.saveToString(compression)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Save the GaloisKeys as a binary Uint8Array\n       *\n       * @function\n       * @name GaloisKeys#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the GaloisKeys in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a GaloisKeys from a base64 string\n       *\n       * @function\n       * @name GaloisKeys#load\n       * @param {Context} context Encryption context to enforce\n       * @param {string} encoded Base64 encoded string\n       */\n      load(context: Context, encoded: string) {\n        try {\n          _instance.loadFromString(context.instance, encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a GaloisKeys from an Uint8Array holding binary data\n       *\n       * @function\n       * @name GaloisKeys#loadArray\n       * @param {Context} context Encryption context to enforce\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(context: Context, array: Uint8Array) {\n        try {\n          _instance.loadFromArray(context.instance, array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy an existing GaloisKeys and overwrite this instance\n       *\n       * @function\n       * @name GaloisKeys#copy\n       * @param {GaloisKeys} key GaloisKeys to copy\n       * @example\n       * const keyA = keyGenerator.createGaloisKeys()\n       * const keyB = seal.GaloisKeys()\n       * keyB.copy(keyA)\n       * // keyB holds a copy of keyA\n       */\n      copy(key: GaloisKeys) {\n        try {\n          _instance.copy(key.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Clone and return a new instance of this GaloisKeys\n       *\n       * @function\n       * @name GaloisKeys#clone\n       * @returns {GaloisKeys}\n       * @example\n       * const keyA = keyGenerator.createGaloisKeys()\n       * const keyB = keyA.clone()\n       * // keyB holds a copy of keyA\n       */\n      clone(): GaloisKeys {\n        try {\n          const clonedInstance = _instance.clone()\n          const key = GaloisKeysConstructor(library)({\n            Exception,\n            ComprModeType,\n            Vector\n          })()\n          key.inject(clonedInstance)\n          return key\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Move a GaloisKeys into this one and delete the old reference\n       *\n       * @function\n       * @name GaloisKeys#move\n       * @param {GaloisKeys} key GaloisKeys to move\n       * @example\n       * const keyA = keyGenerator.createGaloisKeys()\n       * const keyB = seal.GaloisKeys()\n       * keyB.move(keyA)\n       * // keyB holds a the instance of keyA.\n       * // keyA no longer holds an instance\n       */\n      move(key: GaloisKeys) {\n        try {\n          _instance.move(key.instance)\n          // TODO: find optimization\n          // This method results in a copy instead of a real move.\n          // Therefore, we need to delete the old instance.\n          key.delete()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n\n    const fin = autoFinalize(self, _instance)\n\n    return self\n  }\n\nexport const GaloisKeysInit = ({\n  loader\n}: LoaderOptions): GaloisKeysDependencies => {\n  const library: Library = loader.library\n  return GaloisKeysConstructor(library)\n}\n","import { Context } from './context'\nimport { Exception, SealError } from './exception'\nimport { autoFinalize } from './finalizer'\nimport { GaloisKeys, GaloisKeysConstructorOptions } from './galois-keys'\nimport { PublicKey, PublicKeyConstructorOptions } from './public-key'\nimport { RelinKeys, RelinKeysConstructorOptions } from './relin-keys'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { SecretKey, SecretKeyConstructorOptions } from './secret-key'\nimport { Serializable, SerializableConstructorOptions } from './serializable'\n\nexport interface KeyGeneratorDependencyOptions {\n  readonly Exception: Exception\n  readonly PublicKey: PublicKeyConstructorOptions\n  readonly SecretKey: SecretKeyConstructorOptions\n  readonly RelinKeys: RelinKeysConstructorOptions\n  readonly GaloisKeys: GaloisKeysConstructorOptions\n  readonly Serializable: SerializableConstructorOptions\n}\n\nexport interface KeyGeneratorDependencies {\n  ({\n    Exception,\n    PublicKey,\n    SecretKey,\n    RelinKeys,\n    GaloisKeys,\n    Serializable\n  }: KeyGeneratorDependencyOptions): KeyGeneratorConstructorOptions\n}\n\nexport interface KeyGeneratorConstructorOptions {\n  (context: Context, secretKey?: SecretKey): KeyGenerator\n}\n\nexport interface KeyGenerator {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly secretKey: () => SecretKey\n  readonly createPublicKeySerializable: () => Serializable\n  readonly createPublicKey: () => PublicKey\n  readonly createRelinKeysSerializable: () => Serializable\n  readonly createRelinKeys: () => RelinKeys\n  readonly createGaloisKeysSerializable: (steps?: Int32Array) => Serializable\n  readonly createGaloisKeys: (steps?: Int32Array) => GaloisKeys\n}\n\nconst KeyGeneratorConstructor =\n  (library: Library): KeyGeneratorDependencies =>\n  ({\n    Exception,\n    PublicKey,\n    SecretKey,\n    RelinKeys,\n    GaloisKeys,\n    Serializable\n  }: KeyGeneratorDependencyOptions): KeyGeneratorConstructorOptions =>\n  (context, secretKey): KeyGenerator => {\n    const Constructor = library.KeyGenerator\n    let _instance = constructInstance(context, secretKey)\n\n    function constructInstance(context: Context, secretKey?: SecretKey) {\n      try {\n        if (secretKey) {\n          return new Constructor(context.instance, secretKey.instance)\n        }\n        return new Constructor(context.instance)\n      } catch (e) {\n        throw Exception.safe(e as SealError)\n      }\n    }\n    /**\n     * @implements KeyGenerator\n     */\n\n    /**\n     * @interface KeyGenerator\n     */\n    const self: KeyGenerator = {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name KeyGenerator#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name KeyGenerator#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        self.delete()\n        _instance = instance\n        fin.reregister(_instance)\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name KeyGenerator#delete\n       */\n      delete() {\n        if (!_instance) {\n          return\n        }\n        fin.unregister()\n        _instance.delete()\n        _instance = undefined\n      },\n\n      /**\n       * Return the generated SecretKey\n       *\n       * @function\n       * @name KeyGenerator#secretKey\n       * @returns {SecretKey} The secret key that was generated upon instantiation of this KeyGenerator\n       */\n      secretKey(): SecretKey {\n        try {\n          const key = SecretKey()\n          const instance = _instance.secretKey()\n          key.inject(instance)\n          return key\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Create a new PublicKey instance\n       *\n       * @function\n       * @name KeyGenerator#createPublicKey\n       * @returns {PublicKey} A new PublicKey instance\n       */\n      createPublicKey(): PublicKey {\n        try {\n          const key = PublicKey()\n          _instance.createPublicKey(key.instance)\n          return key\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Create a new, Serializable PublicKey instance\n       *\n       * @function\n       * @name KeyGenerator#createPublicKeySerializable\n       * @returns {Serializable<PublicKey>} A new, serializable, PublicKey instance\n       */\n      createPublicKeySerializable(): Serializable {\n        try {\n          const serialized = Serializable()\n          const instance = _instance.createPublicKeySerializable()\n          serialized.unsafeInject(instance)\n          return serialized\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Generates and returns relinearization keys. This function returns\n       * relinearization keys in a fully expanded form and is meant to be used\n       * primarily for demo, testing, and debugging purposes.\n       *\n       * @function\n       * @name KeyGenerator#createRelinKeys\n       * @returns {RelinKeys} New RelinKeys from the KeyGenerator's internal secret key\n       */\n      createRelinKeys(): RelinKeys {\n        try {\n          const keys = RelinKeys()\n          _instance.createRelinKeys(keys.instance)\n          return keys\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Generates and returns relinearization keys as a serializable object.\n       *\n       * Half of the key data is pseudo-randomly generated from a seed to reduce\n       * the object size. The resulting serializable object cannot be used\n       * directly and is meant to be serialized for the size reduction to have an\n       * impact.\n       *\n       *\n       * @function\n       * @name KeyGenerator#createRelinKeysSerializable\n       * @returns {Serializable<RelinKeys>} New, serializable RelinKeys from the KeyGenerator's internal secret key\n       */\n      createRelinKeysSerializable(): Serializable {\n        try {\n          const serialized = Serializable()\n          const instance = _instance.createRelinKeysSerializable()\n          serialized.unsafeInject(instance)\n          return serialized\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Generates and returns Galois keys. This function returns Galois keys in\n       * a fully expanded form and is meant to be used primarily for demo, testing,\n       * and debugging purposes. The user can optionally give an input a vector of desired\n       * Galois rotation step counts, where negative step counts correspond to\n       * rotations to the right and positive step counts correspond to rotations to\n       * the left. A step count of zero can be used to indicate a column rotation\n       * in the BFV scheme complex conjugation in the CKKS scheme.\n       *\n       * @function\n       * @name KeyGenerator#createGaloisKeys\n       * @param {Int32Array} [steps=Int32Array.from([])] Specific Galois Elements to generate\n       * @returns {GaloisKeys} New GaloisKeys from the KeyGenerator's internal secret key\n       */\n      createGaloisKeys(steps: Int32Array = Int32Array.from([])): GaloisKeys {\n        try {\n          const keys = GaloisKeys()\n          _instance.createGaloisKeys(steps, keys.instance)\n          return keys\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Generates and returns Galois keys as a serializable object. This function\n       * creates specific Galois keys that can be used to apply specific Galois\n       * automorphisms on encrypted data. The user can optionally give an input a vector\n       * of desired Galois rotation step counts, where negative step counts\n       * correspond to rotations to the right and positive step counts correspond\n       * to rotations to the left. A step count of zero can be used to indicate\n       * a column rotation in the BFV scheme complex conjugation in the CKKS scheme.\n       * Half of the key data is pseudo-randomly generated from a seed to reduce\n       * the object size. The resulting serializable object cannot be used\n       * directly and is meant to be serialized for the size reduction to have an\n       * impact.\n       *\n       * @function\n       * @name KeyGenerator#createGaloisKeysSerializable\n       * @param {Int32Array} [steps=Int32Array.from([])] Specific Galois Elements to generate\n       * @returns {Serializable<GaloisKeys>} Base64 encoded string\n       */\n      createGaloisKeysSerializable(\n        steps: Int32Array = Int32Array.from([])\n      ): Serializable {\n        try {\n          const serialized = Serializable()\n          const instance = _instance.createGaloisKeysSerializable(steps)\n          serialized.unsafeInject(instance)\n          return serialized\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n\n    const fin = autoFinalize(self, _instance)\n\n    return self\n  }\n\nexport const KeyGeneratorInit = ({\n  loader\n}: LoaderOptions): KeyGeneratorDependencies => {\n  const library: Library = loader.library\n  return KeyGeneratorConstructor(library)\n}\n","import { Library, LoaderOptions } from './seal'\n\nexport interface MemoryPoolHandleDependencies {\n  (): MemoryPoolHandleConstructorOptions\n}\n\nexport interface MemoryPoolHandleConstructorOptions {\n  (): MemoryPoolHandle\n}\n\nexport interface MemoryPoolHandle {\n  readonly global: any\n  readonly threadLocal: any\n}\n\nconst MemoryPoolHandleConstructor =\n  (library: Library): MemoryPoolHandleDependencies =>\n  (): MemoryPoolHandleConstructorOptions =>\n  (): MemoryPoolHandle => {\n    // Static methods\n    const _global = library.MemoryPoolHandle.MemoryPoolHandleGlobal\n    const _threadLocal = library.MemoryPoolHandle.MemoryPoolHandleThreadLocal\n\n    /**\n     * @implements MemoryPoolHandle\n     */\n\n    /**\n     * @interface MemoryPoolHandle\n     */\n    return {\n      /**\n       * The MemoryPoolHandle pointing to the global memory pool.\n       *\n       * @readonly\n       * @name MemoryPoolHandle.global\n       * @type {MemoryPoolHandle.global}\n       */\n      get global() {\n        /**\n         * @typedef {MemoryPoolHandle.global} MemoryPoolHandle.global\n         */\n        return _global()\n      },\n\n      /**\n       * The MemoryPoolHandle pointing to the thread-local memory pool.\n       *\n       * @readonly\n       * @name MemoryPoolHandle.threadLocal\n       * @type {MemoryPoolHandle.threadLocal}\n       */\n      get threadLocal() {\n        /**\n         * @typedef {MemoryPoolHandle.threadLocal} MemoryPoolHandle.threadLocal\n         */\n        return _threadLocal()\n      }\n    }\n  }\n\nexport const MemoryPoolHandleInit = ({\n  loader\n}: LoaderOptions): MemoryPoolHandleDependencies => {\n  const library: Library = loader.library\n  return MemoryPoolHandleConstructor(library)\n}\n","import { ComprModeType } from './compr-mode-type'\nimport { Exception, SealError } from './exception'\nimport { autoFinalize } from './finalizer'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { VectorConstructorOptions } from './vector'\n\nexport interface ModulusDependencyOptions {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport interface ModulusDependencies {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: ModulusDependencyOptions): ModulusConstructorOptions\n}\n\nexport interface ModulusConstructorOptions {\n  (value: bigint): Modulus\n}\n\nexport interface Modulus {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly setValue: (value: bigint) => void\n  readonly value: bigint\n  readonly bitCount: number\n  readonly isZero: boolean\n  readonly isPrime: boolean\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (encoded: string) => void\n  readonly loadArray: (array: Uint8Array) => void\n}\n\nconst ModulusConstructor =\n  (library: Library): ModulusDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: ModulusDependencyOptions): ModulusConstructorOptions =>\n  (value: bigint): Modulus => {\n    // Static methods\n    const Constructor = library.Modulus\n\n    let _instance = createModulus(value)\n\n    function createModulus(value: bigint) {\n      try {\n        const inst = new Constructor()\n        inst.setValue(value.toString())\n        return inst\n      } catch (e) {\n        throw Exception.safe(e as SealError)\n      }\n    }\n\n    /**\n     * @implements Modulus\n     */\n\n    /**\n     * @interface Modulus\n     */\n    const self: Modulus = {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Modulus#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance\n       *\n       * @private\n       * @function\n       * @name Modulus#inject\n       * @param {Instance} instance WASM instance\n       */\n      inject(instance: Instance) {\n        self.delete()\n        _instance = new Constructor(instance)\n        fin.reregister(_instance)\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Modulus#delete\n       */\n      delete() {\n        if (!_instance) {\n          return\n        }\n        fin.unregister()\n        _instance.delete()\n        _instance = undefined\n      },\n\n      /**\n       * Loads a Modulus from a string representing an uint64 value.\n       *\n       * @function\n       * @name Modulus#setValue\n       * @param {BigInt} value BigInt value to set\n       */\n      setValue(value: bigint) {\n        try {\n          _instance.setValue(value.toString())\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * The value of the current Modulus as a BigInt.\n       *\n       * @readonly\n       * @name Modulus#value\n       * @type {BigInt}\n       */\n      get value() {\n        // eslint-disable-next-line no-undef\n        return BigInt(_instance.value())\n      },\n\n      /**\n       * The significant bit count of the value of the current Modulus.\n       *\n       * @readonly\n       * @name Modulus#bitCount\n       * @type {number}\n       */\n      get bitCount() {\n        return _instance.bitCount()\n      },\n\n      /**\n       * Whether the value of the current Modulus is zero.\n       *\n       * @readonly\n       * @name Modulus#isZero\n       * @type {boolean}\n       */\n      get isZero() {\n        return _instance.isZero()\n      },\n\n      /**\n       * Whether the value of the current Modulus is a prime number.\n       *\n       * @readonly\n       * @name Modulus#isPrime\n       * @type {boolean}\n       */\n      get isPrime() {\n        return _instance.isPrime()\n      },\n\n      /**\n       * Save the Modulus as a base64 string\n       *\n       * @function\n       * @name Modulus#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        return _instance.saveToString(compression)\n      },\n\n      /**\n       * Save the Modulus as a binary Uint8Array\n       *\n       * @function\n       * @name Modulus#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the Modulus in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a Modulus from a base64 string\n       *\n       * @function\n       * @name Modulus#load\n       * @param {string} encoded Base64 encoded string\n       */\n      load(encoded: string) {\n        try {\n          _instance.loadFromString(encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a Modulus from an Uint8Array holding binary data\n       *\n       * @function\n       * @name Modulus#loadArray\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(array: Uint8Array) {\n        try {\n          _instance.loadFromArray(array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n\n    const fin = autoFinalize(self, _instance)\n\n    return self\n  }\n\nexport const ModulusInit = ({ loader }: LoaderOptions): ModulusDependencies => {\n  const library: Library = loader.library\n  return ModulusConstructor(library)\n}\n","import { Exception, SealError } from './exception'\nimport { autoFinalize } from './finalizer'\nimport { Instance, Library, LoaderOptions } from './seal'\n\nexport interface ParmsIdTypeDependencyOptions {\n  readonly Exception: Exception\n}\n\nexport interface ParmsIdTypeDependencies {\n  ({ Exception }: ParmsIdTypeDependencyOptions): ParmsIdTypeConstructorOptions\n}\n\nexport interface ParmsIdTypeConstructorOptions {\n  (): ParmsIdType\n}\n\nexport interface ParmsIdType {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly values: BigUint64Array\n}\n\nconst ParmsIdTypeConstructor =\n  (library: Library): ParmsIdTypeDependencies =>\n  ({\n    Exception\n  }: ParmsIdTypeDependencyOptions): ParmsIdTypeConstructorOptions =>\n  (): ParmsIdType => {\n    const Constructor = library.ParmsIdType\n\n    let _instance: Instance\n\n    /**\n     * @implements ParmsIdType\n     */\n\n    /**\n     * @interface ParmsIdType\n     */\n    const self: ParmsIdType = {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name ParmsIdType#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance\n       *\n       * @private\n       * @function\n       * @name ParmsIdType#inject\n       * @param {Instance} instance WASM instance\n       */\n      inject(instance: Instance) {\n        self.delete()\n        _instance = new Constructor(instance)\n        fin.reregister(_instance)\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name ParmsIdType#delete\n       */\n      delete() {\n        if (!_instance) {\n          return\n        }\n        fin.unregister()\n        _instance.delete()\n        _instance = undefined\n      },\n\n      /**\n       * The values of the current ParmsIdType as an Array of BigInts.\n       *\n       * @readonly\n       * @name ParmsIdType#values\n       * @type {BigUint64Array}\n       */\n      get values() {\n        try {\n          const instance = _instance.values()\n          return BigUint64Array.from(instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n\n    const fin = autoFinalize(self, _instance)\n\n    return self\n  }\n\nexport const ParmsIdTypeInit = ({\n  loader\n}: LoaderOptions): ParmsIdTypeDependencies => {\n  const library: Library = loader.library\n  return ParmsIdTypeConstructor(library)\n}\n","import { Exception, SealError } from './exception'\nimport { Modulus, ModulusConstructorOptions } from './modulus'\nimport { Library, LoaderOptions } from './seal'\nimport { Vector, VectorConstructorOptions } from './vector'\n\nexport interface PlainModulusDependencyOptions {\n  readonly Exception: Exception\n  readonly Modulus: ModulusConstructorOptions\n  readonly Vector: VectorConstructorOptions\n}\n\nexport interface PlainModulusDependencies {\n  ({\n    Exception,\n    Modulus,\n    Vector\n  }: PlainModulusDependencyOptions): PlainModulusConstructorOptions\n}\n\nexport interface PlainModulusConstructorOptions {\n  (): PlainModulus\n}\n\nexport interface PlainModulus {\n  readonly Batching: (polyModulusDegree: number, bitSize: number) => Modulus\n  readonly BatchingVector: (\n    polyModulusDegree: number,\n    bitSizes: Int32Array\n  ) => Vector\n}\n\nconst PlainModulusConstructor =\n  (library: Library): PlainModulusDependencies =>\n  ({\n    Exception,\n    Modulus,\n    Vector\n  }: PlainModulusDependencyOptions): PlainModulusConstructorOptions =>\n  (): PlainModulus => {\n    // Static methods\n    const _Batching = library.PlainModulus.Batching\n    const _BatchingVector = library.PlainModulus.BatchingVector\n\n    /**\n     * @implements PlainModulus\n     */\n\n    /**\n     * @interface PlainModulus\n     */\n    return {\n      /**\n       * Creates a prime number PlainModulus for use as plainPlainModulus encryption\n       * parameter that supports batching with a given polyPlainModulusDegree.\n       *\n       * @function\n       * @name PlainModulus.Batching\n       * @param {number} polyModulusDegree The degree of the polynomial modulus\n       * @param {number} bitSize The bit-size of the desired prime number\n       * @returns {Modulus} A PlainModulus containing the prime number\n       */\n      Batching(polyModulusDegree: number, bitSize: number): Modulus {\n        try {\n          const smallMod = Modulus(BigInt(0))\n          smallMod.inject(_Batching(polyModulusDegree, bitSize))\n          return smallMod\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Creates several prime number PlainModulus elements that can be used as\n       * plainPlainModulus encryption parameters, each supporting batching with a given\n       * polyPlainModulusDegree.\n       *\n       * @function\n       * @name PlainModulus.BatchingVector\n       * @param {Number} polyPlainModulusDegree The degree of the polynomial modulus\n       * @param {Int32Array} bitSizes Int32Array containing values representing bit-sizes of primes\n       * @returns {Vector} Vector of Modulus containing prime numbers\n       */\n      BatchingVector(\n        polyPlainModulusDegree: number,\n        bitSizes: Int32Array\n      ): Vector {\n        try {\n          const vectBitSizes = Vector()\n          vectBitSizes.from(bitSizes)\n          const vect = _BatchingVector(\n            polyPlainModulusDegree,\n            vectBitSizes.instance\n          )\n          vectBitSizes.delete()\n          return vect\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n  }\n\nexport const PlainModulusInit = ({\n  loader\n}: LoaderOptions): PlainModulusDependencies => {\n  const library: Library = loader.library\n  return PlainModulusConstructor(library)\n}\n","import { ComprModeType } from './compr-mode-type'\nimport { INVALID_PLAIN_CONSRUCTOR_OPTIONS } from './constants'\nimport { Context } from './context'\nimport { Exception, SealError } from './exception'\nimport { autoFinalize } from './finalizer'\nimport { MemoryPoolHandle } from './memory-pool-handle'\nimport { ParmsIdType, ParmsIdTypeConstructorOptions } from './parms-id-type'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { VectorConstructorOptions } from './vector'\n\nexport interface PlainTextDependencyOptions {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly Vector: VectorConstructorOptions\n}\n\nexport interface PlainTextConstructorParams {\n  capacity?: number\n  coeffCount?: number\n  pool?: MemoryPoolHandle\n}\n\nexport type PlainTextDependencies = (\n  deps: PlainTextDependencyOptions\n) => PlainTextConstructorOptions\n\nexport type PlainTextConstructorOptions = (\n  params?: PlainTextConstructorParams\n) => PlainText\n\nexport interface PlainText {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly reserve: (capacity: number) => void\n  readonly shrinkToFit: () => void\n  readonly release: () => void\n  readonly resize: (coeffCount: number) => void\n  readonly setZero: () => void\n  readonly isZero: boolean\n  readonly capacity: number\n  readonly coeffCount: number\n  readonly significantCoeffCount: number\n  readonly nonzeroCoeffCount: number\n  readonly toPolynomial: () => string\n  readonly isNttForm: boolean\n  readonly parmsId: ParmsIdType\n  readonly scale: number\n  readonly setScale: (scale: number) => void\n  readonly pool: MemoryPoolHandle\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (plain: PlainText) => void\n  readonly clone: () => PlainText\n  readonly move: (plain: PlainText) => void\n}\n\nconst PlainTextConstructor =\n  (library: Library): PlainTextDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    ParmsIdType,\n    MemoryPoolHandle,\n    Vector\n  }: PlainTextDependencyOptions): PlainTextConstructorOptions =>\n  (params: PlainTextConstructorParams = {}): PlainText => {\n    // Static methods\n    const Constructor = library.Plaintext\n\n    let _instance = construct(params)\n\n    function construct(constructParams: PlainTextConstructorParams = {}) {\n      const {\n        capacity,\n        coeffCount,\n        pool = MemoryPoolHandle.global\n      } = constructParams\n\n      try {\n        if (capacity === undefined && coeffCount === undefined) {\n          return new Constructor(pool)\n        } else if (capacity === undefined && coeffCount !== undefined) {\n          return new Constructor(coeffCount, pool)\n        } else if (capacity !== undefined && coeffCount !== undefined) {\n          return new Constructor(capacity, coeffCount, pool)\n        } else {\n          throw new Error(INVALID_PLAIN_CONSRUCTOR_OPTIONS)\n        }\n      } catch (e) {\n        throw Exception.safe(e as SealError)\n      }\n    }\n    /**\n     * @implements PlainText\n     */\n\n    /**\n     * @interface PlainText\n     */\n    const self: PlainText = {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name PlainText#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name PlainText#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        self.delete()\n        _instance = instance\n        fin.reregister(_instance)\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name PlainText#delete\n       */\n      delete() {\n        if (!_instance) {\n          return\n        }\n        fin.unregister()\n        _instance.delete()\n        _instance = undefined\n      },\n\n      /**\n       * Allocates enough memory to accommodate the backing array of a plaintext\n       * with given capacity.\n       *\n       * @function\n       * @name PlainText#reserve\n       * @param {number} capacity The capacity to reserve\n       */\n      reserve(capacity: number) {\n        try {\n          return _instance.reserve(capacity)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Allocates enough memory to accommodate the backing array of the current\n       * PlainText and copies it over to the new location. This function is meant\n       * to reduce the memory use of the PlainText to smallest possible and can be\n       * particularly important after modulus switching.\n       *\n       * @function\n       * @name PlainText#shrinkToFit\n       */\n      shrinkToFit() {\n        _instance.shrinkToFit()\n      },\n\n      /**\n       * Resets the PlainText. This function releases any memory allocated by the\n       * PlainText, returning it to the memory pool.\n       *\n       * @function\n       * @name PlainText#release\n       */\n      release() {\n        _instance.release()\n      },\n\n      /**\n       * Resizes the PlainText to have a given coefficient count. The PlainText\n       * is automatically reallocated if the new coefficient count does not fit in\n       * the current capacity.\n       *\n       * @function\n       * @name PlainText#resize\n       * @param {number} coeffCount The number of coefficients in the plaintext polynomial\n       */\n      resize(coeffCount: number) {\n        try {\n          _instance.resize(coeffCount)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Sets the PlainText polynomial to zero.\n       *\n       * @function\n       * @name PlainText#setZero\n       */\n      setZero() {\n        _instance.setZero()\n      },\n\n      /**\n       * Whether the current PlainText polynomial has all zero coefficients.\n       *\n       * @readonly\n       * @name PlainText#isZero\n       * @type {boolean}\n       */\n      get isZero() {\n        return _instance.isZero()\n      },\n\n      /**\n       * The capacity of the current allocation.\n       *\n       * @readonly\n       * @name PlainText#capacity\n       * @type {number}\n       */\n      get capacity() {\n        return _instance.capacity()\n      },\n\n      /**\n       * The coefficient count of the current PlainText polynomial.\n       *\n       * @readonly\n       * @name PlainText#coeffCount\n       * @type {number}\n       */\n      get coeffCount() {\n        return _instance.coeffCount()\n      },\n\n      /**\n       * The significant coefficient count of the current PlainText polynomial.\n       *\n       * @readonly\n       * @name PlainText#significantCoeffCount\n       * @type {number}\n       */\n      get significantCoeffCount() {\n        return _instance.significantCoeffCount()\n      },\n\n      /**\n       * Returns the non-zero coefficient count of the current PlainText polynomial.\n       *\n       * @readonly\n       * @name PlainText#nonzeroCoeffCount\n       * @type {number}\n       */\n      get nonzeroCoeffCount() {\n        return _instance.nonzeroCoeffCount()\n      },\n\n      /**\n       * Returns a human-readable string description of the PlainText polynomial.\n       *\n       * The returned string is of the form \"7FFx^3 + 1x^1 + 3\" with a format\n       * summarized by the following:\n       * 1. Terms are listed in order of strictly decreasing exponent\n       * 2. Coefficient values are non-negative and in hexadecimal format (hexadecimal\n       * letters are in upper-case)\n       * 3. Exponents are positive and in decimal format\n       * 4. Zero coefficient terms (including the constant term) are omitted unless\n       * the polynomial is exactly 0 (see rule 9)\n       * 5. Term with the exponent value of one is written as x^1\n       * 6. Term with the exponent value of zero (the constant term) is written as\n       * just a hexadecimal number without x or exponent\n       * 7. Terms are separated exactly by <space>+<space>\n       * 8. Other than the +, no other terms have whitespace\n       * 9. If the polynomial is exactly 0, the string \"0\" is returned\n       *\n       * @function\n       * @name PlainText#toPolynomial\n       * @throws std::invalid_argument if the PlainText is in NTT transformed form\n       * @returns {string} Polynomial string\n       */\n      toPolynomial(): string {\n        try {\n          return _instance.toPolynomial()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Whether the PlainText is in NTT form.\n       *\n       * @readonly\n       * @name PlainText#isNttForm\n       * @type {boolean}\n       */\n      get isNttForm() {\n        return _instance.isNttForm()\n      },\n\n      /**\n       * The reference to parmsId of the PlainText. The parmsId must remain zero unless the\n       * PlainText polynomial is in NTT form.\n       *\n       * @see {@link EncryptionParameters} for more information about parmsId.\n       *\n       * @readonly\n       * @name PlainText#parmsId\n       * @type {ParmsIdType}\n       */\n      get parmsId() {\n        const parms = ParmsIdType()\n        parms.inject(_instance.parmsId())\n        return parms\n      },\n\n      /**\n       * The reference to the scale. This is only needed when using the CKKS\n       * encryption scheme. The user should have little or no reason to ever change\n       * the scale by hand.\n       *\n       * @readonly\n       * @name PlainText#scale\n       * @type {number}\n       */\n      get scale() {\n        return _instance.scale()\n      },\n\n      /**\n       * Sets the PlainText scale. This is only needed when using the\n       * CKKS encryption scheme. The user should have little or no reason to ever\n       * change the scale by hand.\n       *\n       * @function\n       * @name PlainText#setScale\n       * @param {number} scale The scale to set\n       */\n      setScale(scale: number) {\n        _instance.setScale(scale)\n      },\n\n      /**\n       * The currently used MemoryPoolHandle.\n       *\n       * @readonly\n       * @name PlainText#pool\n       * @type {MemoryPoolHandle}\n       */\n      get pool() {\n        return _instance.pool()\n      },\n\n      /**\n       * Save the PlainText to a base64 string\n       *\n       * @function\n       * @name PlainText#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        return _instance.saveToString(compression)\n      },\n\n      /**\n       * Save the PlainText as a binary Uint8Array\n       *\n       * @function\n       * @name PlainText#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the PlainText in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a PlainText from a base64 string\n       *\n       * @function\n       * @name PlainText#load\n       * @param {Context} context Encryption context to enforce\n       * @param {string} encoded Base64 encoded string\n       */\n      load(context: Context, encoded: string) {\n        try {\n          _instance.loadFromString(context.instance, encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a PlainText from an Uint8Array holding binary data\n       *\n       * @function\n       * @name PlainText#loadArray\n       * @param {Context} context Encryption context to enforce\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(context: Context, array: Uint8Array) {\n        try {\n          _instance.loadFromArray(context.instance, array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy an existing PlainText and overwrite this instance\n       *\n       * @function\n       * @name PlainText#copy\n       * @param {PlainText} plain PlainText to copy\n       * @example\n       * const plainTextA = seal.PlainText()\n       * // ... after encoding some data ...\n       * const plainTextB = seal.PlainText()\n       * plainTextB.copy(plainTextA)\n       * // plainTextB holds a copy of plainTextA\n       */\n      copy(plain: PlainText) {\n        try {\n          _instance.copy(plain.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Clone and return a new instance of this PlainText\n       *\n       * @function\n       * @name PlainText#clone\n       * @returns {PlainText}\n       * @example\n       * const plainTextA = seal.PlainText()\n       * // ... after encoding some data ...\n       * const plainTextB = plainTextA.clone()\n       * // plainTextB holds a copy of plainTextA\n       */\n      clone(): PlainText {\n        try {\n          const clonedInstance = _instance.clone()\n          const plain = PlainTextConstructor(library)({\n            Exception,\n            ComprModeType,\n            ParmsIdType,\n            MemoryPoolHandle,\n            Vector\n          })()\n          plain.unsafeInject(clonedInstance)\n          return plain\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Move a PlainText into this one and delete the old reference\n       *\n       * @function\n       * @name PlainText#move\n       * @param {PlainText} plain PlainText to move\n       * @example\n       * const plainTextA = seal.PlainText()\n       * // ... after encoding some data ...\n       * const plainTextB = seal.PlainText()\n       * plainTextB.move(plainTextA)\n       * // plainTextB holds a the instance of plainTextA.\n       * // plainTextA no longer holds an instance\n       */\n      move(plain: PlainText) {\n        try {\n          _instance.move(plain.instance)\n          // TODO: find optimization\n          // This method results in a copy instead of a real move.\n          // Therefore, we need to delete the old instance.\n          plain.delete()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n\n    const fin = autoFinalize(self, _instance)\n\n    return self\n  }\n\nexport const PlainTextInit = ({\n  loader\n}: LoaderOptions): PlainTextDependencies => {\n  const library: Library = loader.library\n  return PlainTextConstructor(library)\n}\n","import { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\nimport { Exception, SealError } from './exception'\nimport { autoFinalize } from './finalizer'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { VectorConstructorOptions } from './vector'\n\nexport interface PublicKeyDependencyOptions {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport interface PublicKeyDependencies {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: PublicKeyDependencyOptions): PublicKeyConstructorOptions\n}\n\nexport interface PublicKeyConstructorOptions {\n  (): PublicKey\n}\n\nexport interface PublicKey {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (key: PublicKey) => void\n  readonly clone: () => PublicKey\n  readonly move: (key: PublicKey) => void\n}\n\nconst PublicKeyConstructor =\n  (library: Library): PublicKeyDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: PublicKeyDependencyOptions): PublicKeyConstructorOptions =>\n  (): PublicKey => {\n    const Constructor = library.PublicKey\n    let _instance = new Constructor()\n\n    /**\n     * @implements PublicKey\n     */\n\n    /**\n     * @interface PublicKey\n     */\n    const self: PublicKey = {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name PublicKey#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance\n       *\n       * @private\n       * @function\n       * @name PublicKey#inject\n       * @param {Instance} instance WASM instance\n       */\n      inject(instance: Instance) {\n        self.delete()\n        _instance = new Constructor(instance)\n        fin.reregister(_instance)\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name PublicKey#delete\n       */\n      delete() {\n        if (!_instance) {\n          return\n        }\n        fin.unregister()\n        _instance.delete()\n        _instance = undefined\n      },\n\n      /**\n       * Save the Encryption Parameters to a base64 string\n       *\n       * @function\n       * @name PublicKey#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        try {\n          return _instance.saveToString(compression)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Save the PublicKey as a binary Uint8Array\n       *\n       * @function\n       * @name PublicKey#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the PublicKey in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a PublicKey from a base64 string\n       *\n       * @function\n       * @name PublicKey#load\n       * @param {Context} context Encryption context to enforce\n       * @param {string} encoded Base64 encoded string\n       */\n      load(context: Context, encoded: string) {\n        try {\n          _instance.loadFromString(context.instance, encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a PublicKey from an Uint8Array holding binary data\n       *\n       * @function\n       * @name PublicKey#loadArray\n       * @param {Context} context Encryption context to enforce\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(context: Context, array: Uint8Array) {\n        try {\n          _instance.loadFromArray(context.instance, array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy an existing PublicKey and overwrite this instance\n       *\n       * @function\n       * @name PublicKey#copy\n       * @param {PublicKey} key PublicKey to copy\n       * @example\n       * const keyA = keyGenerator.createPublicKey()\n       * const keyB = seal.PublicKey()\n       * keyB.copy(keyA)\n       * // keyB holds a copy of keyA\n       */\n      copy(key: PublicKey) {\n        try {\n          _instance.copy(key.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Clone and return a new instance of this PublicKey\n       *\n       * @function\n       * @name PublicKey#clone\n       * @returns {PublicKey}\n       * @example\n       * const keyA = keyGenerator.createPublicKey()\n       * const keyB = keyA.clone()\n       * // keyB holds a copy of keyA\n       */\n      clone(): PublicKey {\n        try {\n          const clonedInstance = _instance.clone()\n          const key = PublicKeyConstructor(library)({\n            Exception,\n            ComprModeType,\n            Vector\n          })()\n          key.inject(clonedInstance)\n          return key\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Move a PublicKey into this one and delete the old reference\n       *\n       * @function\n       * @name PublicKey#move\n       * @param {PublicKey} key PublicKey to move\n       * @example\n       * const keyA = keyGenerator.createPublicKey()\n       * const keyB = seal.PublicKey()\n       * keyB.move(keyA)\n       * // keyB holds a the instance of keyA.\n       * // keyA no longer holds an instance\n       */\n      move(key: PublicKey) {\n        try {\n          _instance.move(key.instance)\n          // TODO: find optimization\n          // This method results in a copy instead of a real move.\n          // Therefore, we need to delete the old instance.\n          key.delete()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n\n    const fin = autoFinalize(self, _instance)\n\n    return self\n  }\n\nexport const PublicKeyInit = ({\n  loader\n}: LoaderOptions): PublicKeyDependencies => {\n  const library: Library = loader.library\n  return PublicKeyConstructor(library)\n}\n","import { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\nimport { Exception, SealError } from './exception'\nimport { autoFinalize } from './finalizer'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { VectorConstructorOptions } from './vector'\n\nexport interface RelinKeysDependencyOptions {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport interface RelinKeysDependencies {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: RelinKeysDependencyOptions): RelinKeysConstructorOptions\n}\n\nexport interface RelinKeysConstructorOptions {\n  (): RelinKeys\n}\n\nexport interface RelinKeys {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly size: number\n  readonly getIndex: (keyPower: number) => number\n  readonly hasKey: (keyPower: number) => boolean\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (key: RelinKeys) => void\n  readonly clone: () => RelinKeys\n  readonly move: (key: RelinKeys) => void\n}\n\nconst RelinKeysConstructor =\n  (library: Library): RelinKeysDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: RelinKeysDependencyOptions): RelinKeysConstructorOptions =>\n  (): RelinKeys => {\n    const Constructor = library.RelinKeys\n    let _instance = new Constructor()\n\n    /**\n     * @implements RelinKeys\n     */\n\n    /**\n     * @interface RelinKeys\n     */\n    const self: RelinKeys = {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name RelinKeys#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance\n       *\n       * @private\n       * @function\n       * @name RelinKeys#inject\n       * @param {Instance} instance WASM instance\n       */\n      inject(instance: Instance) {\n        self.delete()\n        _instance = new Constructor(instance)\n        fin.reregister(_instance)\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name RelinKeys#delete\n       */\n      delete() {\n        if (!_instance) {\n          return\n        }\n        fin.unregister()\n        _instance.delete()\n        _instance = undefined\n      },\n\n      /**\n       * Returns the current number of keyswitching keys. Only keys that are\n       * non-empty are counted.\n       *\n       * @readonly\n       * @name RelinKeys#size\n       * @type {number}\n       */\n      get size() {\n        return _instance.size()\n      },\n\n      /**\n       * Returns the index of a relinearization key in the backing KSwitchKeys\n       * instance that corresponds to the given secret key power, assuming that\n       * it exists in the backing KSwitchKeys.\n       *\n       * @function\n       * @name RelinKeys#getIndex\n       * @param {number} keyPower The power of the secret key\n       * @returns {number} The index of the relin key\n       */\n      getIndex(keyPower: number): number {\n        try {\n          return _instance.getIndex(keyPower)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Returns whether a relinearization key corresponding to a given power of\n       * the secret key exists.\n       *\n       * @function\n       * @name RelinKeys#hasKey\n       * @param {number} keyPower The power of the secret key\n       * @returns {boolean} True if the power exists\n       */\n      hasKey(keyPower: number): boolean {\n        try {\n          return _instance.hasKey(keyPower)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Save the Encryption Parameters to a base64 string\n       *\n       * @function\n       * @name RelinKeys#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        try {\n          return _instance.saveToString(compression)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Save the RelinKeys as a binary Uint8Array\n       *\n       * @function\n       * @name RelinKeys#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the RelinKeys in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a RelinKeys from a base64 string\n       *\n       * @function\n       * @name RelinKeys#load\n       * @param {Context} context Encryption context to enforce\n       * @param {string} encoded Base64 encoded string\n       */\n      load(context: Context, encoded: string) {\n        try {\n          _instance.loadFromString(context.instance, encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a RelinKeys from an Uint8Array holding binary data\n       *\n       * @function\n       * @name RelinKeys#loadArray\n       * @param {Context} context Encryption context to enforce\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(context: Context, array: Uint8Array) {\n        try {\n          _instance.loadFromArray(context.instance, array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy an existing RelinKeys and overwrite this instance\n       *\n       * @function\n       * @name RelinKeys#copy\n       * @param {RelinKeys} key RelinKeys to copy\n       * @example\n       * const keyA = keyGenerator.createRelinKeys()\n       * const keyB = seal.RelinKeys()\n       * keyB.copy(keyA)\n       * // keyB holds a copy of keyA\n       */\n      copy(key: RelinKeys) {\n        try {\n          _instance.copy(key.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Clone and return a new instance of this RelinKeys\n       *\n       * @function\n       * @name RelinKeys#clone\n       * @returns {RelinKeys}\n       * @example\n       * const keyA = keyGenerator.createRelinKeys()\n       * const keyB = keyA.clone()\n       * // keyB holds a copy of keyA\n       */\n      clone(): RelinKeys {\n        try {\n          const clonedInstance = _instance.clone()\n          const key = RelinKeysConstructor(library)({\n            Exception,\n            ComprModeType,\n            Vector\n          })()\n          key.inject(clonedInstance)\n          return key\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Move a RelinKeys into this one and delete the old reference\n       *\n       * @function\n       * @name RelinKeys#move\n       * @param {RelinKeys} key RelinKeys to move\n       * @example\n       * const keyA = keyGenerator.createRelinKeys()\n       * const keyB = seal.RelinKeys()\n       * keyB.move(keyA)\n       * // keyB holds a the instance of keyA.\n       * // keyA no longer holds an instance\n       */\n      move(key: RelinKeys) {\n        try {\n          _instance.move(key.instance)\n          // TODO: find optimization\n          // This method results in a copy instead of a real move.\n          // Therefore, we need to delete the old instance.\n          key.delete()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n\n    const fin = autoFinalize(self, _instance)\n\n    return self\n  }\n\nexport const RelinKeysInit = ({\n  loader\n}: LoaderOptions): RelinKeysDependencies => {\n  const library: Library = loader.library\n  return RelinKeysConstructor(library)\n}\n","import { Library, LoaderOptions } from './seal'\n\nexport interface SchemeTypeDependencies {\n  (): SchemeTypeConstructorOptions\n}\n\nexport interface SchemeTypeConstructorOptions {\n  (): SchemeType\n}\n\nexport interface SchemeType {\n  readonly none: any\n  readonly bfv: any\n  readonly ckks: any\n  readonly bgv: any\n}\n\nconst SchemeTypeConstructor =\n  (library: Library): SchemeTypeDependencies =>\n  (): SchemeTypeConstructorOptions =>\n  (): SchemeType => {\n    // Static methods\n    const _none = library.SchemeType.none\n    const _bfv = library.SchemeType.bfv\n    const _ckks = library.SchemeType.ckks\n    const _bgv = library.SchemeType.bgv\n\n    /**\n     * @implements SchemeType\n     */\n\n    /**\n     * @interface SchemeType\n     */\n    return {\n      /**\n       * Return the 'none' scheme type\n       *\n       * @readonly\n       * @name SchemeType.none\n       * @type {SchemeType.none}\n       */\n      get none() {\n        /**\n         * @typedef {SchemeType.none} SchemeType.none\n         */\n        return _none\n      },\n\n      /**\n       * Return the 'bfv' scheme type\n       *\n       * @readonly\n       * @name SchemeType.bfv\n       * @type {SchemeType.bfv}\n       */\n      get bfv() {\n        /**\n         * @typedef {SchemeType.bfv} SchemeType.bfv\n         */\n        return _bfv\n      },\n\n      /**\n       * Return the 'ckks' scheme type\n       *\n       * @readonly\n       * @name SchemeType.ckks\n       * @type {SchemeType.ckks}\n       */\n      get ckks() {\n        /**\n         * @typedef {SchemeType.ckks} SchemeType.ckks\n         */\n        return _ckks\n      },\n\n      /**\n       * Return the 'bgv' scheme type\n       *\n       * @readonly\n       * @name SchemeType.bgv\n       * @type {SchemeType.bgv}\n       */\n      get bgv() {\n        /**\n         * @typedef {SchemeType.bgv} SchemeType.bgv\n         */\n        return _bgv\n      }\n    }\n  }\n\nexport const SchemeTypeInit = ({\n  loader\n}: LoaderOptions): SchemeTypeDependencies => {\n  const library: Library = loader.library\n  return SchemeTypeConstructor(library)\n}\n","import { version } from '../../package.json'\nimport {\n  BatchEncoderConstructorOptions,\n  BatchEncoderDependencies\n} from './batch-encoder'\nimport {\n  CipherTextConstructorOptions,\n  CipherTextDependencies\n} from './cipher-text'\nimport {\n  CKKSEncoderConstructorOptions,\n  CKKSEncoderDependencies\n} from './ckks-encoder'\nimport { CoeffModulus, CoeffModulusDependencies } from './coeff-modulus'\nimport { ComprModeType, ComprModeTypeDependencies } from './compr-mode-type'\nimport { ContextConstructorOptions, ContextDependencies } from './context'\nimport {\n  ContextDataConstructorOptions,\n  ContextDataDependencies\n} from './context-data'\nimport { DecryptorConstructorOptions, DecryptorDependencies } from './decryptor'\nimport {\n  EncryptionParameterQualifiersConstructorOptions,\n  EncryptionParameterQualifiersDependencies\n} from './encryption-parameter-qualifiers'\nimport {\n  EncryptionParametersConstructorOptions,\n  EncryptionParametersDependencies\n} from './encryption-parameters'\nimport { EncryptorConstructorOptions, EncryptorDependencies } from './encryptor'\nimport { EvaluatorConstructorOptions, EvaluatorDependencies } from './evaluator'\nimport { Exception, ExceptionDependencies } from './exception'\nimport {\n  GaloisKeysConstructorOptions,\n  GaloisKeysDependencies\n} from './galois-keys'\nimport {\n  KeyGeneratorConstructorOptions,\n  KeyGeneratorDependencies\n} from './key-generator'\nimport {\n  MemoryPoolHandle,\n  MemoryPoolHandleDependencies\n} from './memory-pool-handle'\nimport { ModulusConstructorOptions, ModulusDependencies } from './modulus'\nimport {\n  ParmsIdTypeConstructorOptions,\n  ParmsIdTypeDependencies\n} from './parms-id-type'\nimport { PlainModulus, PlainModulusDependencies } from './plain-modulus'\nimport {\n  PlainTextConstructorOptions,\n  PlainTextDependencies\n} from './plain-text'\nimport {\n  PublicKeyConstructorOptions,\n  PublicKeyDependencies\n} from './public-key'\nimport {\n  RelinKeysConstructorOptions,\n  RelinKeysDependencies\n} from './relin-keys'\nimport { SchemeType, SchemeTypeDependencies } from './scheme-type'\nimport {\n  SecretKeyConstructorOptions,\n  SecretKeyDependencies\n} from './secret-key'\nimport { SecurityLevel, SecurityLevelDependencies } from './security-level'\nimport {\n  SerializableConstructorOptions,\n  SerializableDependencies\n} from './serializable'\nimport { VectorConstructorOptions, VectorDependencies } from './vector'\n\nexport type Instance = any\nexport type Loader = any\nexport type Library = any\nexport type Dependencies = any\nexport interface LoaderOptions {\n  readonly loader: Loader\n}\n\nexport interface SEALLibrary {\n  readonly BatchEncoder: BatchEncoderConstructorOptions\n  readonly CipherText: CipherTextConstructorOptions\n  readonly CKKSEncoder: CKKSEncoderConstructorOptions\n  readonly CoeffModulus: CoeffModulus\n  readonly ComprModeType: ComprModeType\n  readonly ContextData: ContextDataConstructorOptions\n  readonly Context: ContextConstructorOptions\n  readonly Decryptor: DecryptorConstructorOptions\n  readonly EncryptionParameterQualifiers: EncryptionParameterQualifiersConstructorOptions\n  readonly EncryptionParameters: EncryptionParametersConstructorOptions\n  readonly Encryptor: EncryptorConstructorOptions\n  readonly Evaluator: EvaluatorConstructorOptions\n  readonly Exception: Exception\n  readonly GaloisKeys: GaloisKeysConstructorOptions\n  readonly KeyGenerator: KeyGeneratorConstructorOptions\n  readonly MemoryPoolHandle: MemoryPoolHandle\n  readonly Modulus: ModulusConstructorOptions\n  readonly ParmsIdType: ParmsIdTypeConstructorOptions\n  readonly PlainText: PlainTextConstructorOptions\n  readonly PlainModulus: PlainModulus\n  readonly PublicKey: PublicKeyConstructorOptions\n  readonly RelinKeys: RelinKeysConstructorOptions\n  readonly SchemeType: SchemeType\n  readonly SecretKey: SecretKeyConstructorOptions\n  readonly SecurityLevel: SecurityLevel\n  readonly Serializable: SerializableConstructorOptions\n  readonly Vector: VectorConstructorOptions\n  readonly Version: string\n}\ninterface SEALConstructorOptions {\n  readonly BatchEncoder: BatchEncoderDependencies\n  readonly CipherText: CipherTextDependencies\n  readonly CKKSEncoder: CKKSEncoderDependencies\n  readonly CoeffModulus: CoeffModulusDependencies\n  readonly ComprModeType: ComprModeTypeDependencies\n  readonly ContextData: ContextDataDependencies\n  readonly Context: ContextDependencies\n  readonly Decryptor: DecryptorDependencies\n  readonly EncryptionParameterQualifiers: EncryptionParameterQualifiersDependencies\n  readonly EncryptionParameters: EncryptionParametersDependencies\n  readonly Encryptor: EncryptorDependencies\n  readonly Evaluator: EvaluatorDependencies\n  readonly Exception: ExceptionDependencies\n  readonly GaloisKeys: GaloisKeysDependencies\n  readonly KeyGenerator: KeyGeneratorDependencies\n  readonly MemoryPoolHandle: MemoryPoolHandleDependencies\n  readonly Modulus: ModulusDependencies\n  readonly ParmsIdType: ParmsIdTypeDependencies\n  readonly PlainText: PlainTextDependencies\n  readonly PlainModulus: PlainModulusDependencies\n  readonly PublicKey: PublicKeyDependencies\n  readonly RelinKeys: RelinKeysDependencies\n  readonly SchemeType: SchemeTypeDependencies\n  readonly SecretKey: SecretKeyDependencies\n  readonly SecurityLevel: SecurityLevelDependencies\n  readonly Serializable: SerializableDependencies\n  readonly Vector: VectorDependencies\n}\n\n/**\n * @implements SEAL\n */\nexport const SEALConstructor = ({\n  BatchEncoder,\n  CipherText,\n  CKKSEncoder,\n  CoeffModulus,\n  ComprModeType,\n  ContextData,\n  Context,\n  Decryptor,\n  EncryptionParameterQualifiers,\n  EncryptionParameters,\n  Encryptor,\n  Evaluator,\n  Exception,\n  GaloisKeys,\n  KeyGenerator,\n  MemoryPoolHandle,\n  Modulus,\n  ParmsIdType,\n  PlainText,\n  PlainModulus,\n  PublicKey,\n  RelinKeys,\n  SchemeType,\n  SecretKey,\n  SecurityLevel,\n  Serializable,\n  Vector\n}: SEALConstructorOptions): SEALLibrary => {\n  // Unfortunately, this library has nested depenencies\n  // so we need to load them in order.\n\n  // Define our singletons\n  const exception = Exception()()\n  const comprModeType = ComprModeType()()\n  const memoryPoolHandle = MemoryPoolHandle()()\n  const securityLevel = SecurityLevel()()\n  const schemeType = SchemeType()()\n\n  // Define our constructors (ORDER MATTERS)\n  const vector = Vector({ Exception: exception })\n  const coeffModulus = CoeffModulus({\n    Exception: exception,\n    SecurityLevel: securityLevel,\n    Vector: vector\n  })()\n  const modulus = Modulus({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const plainModulus = PlainModulus({\n    Exception: exception,\n    Modulus: modulus,\n    Vector: vector\n  })()\n  const serializable = Serializable({\n    Exception: exception,\n    Vector: vector,\n    ComprModeType: comprModeType\n  })\n  const parmsIdType = ParmsIdType({ Exception: exception })\n  const plainText = PlainText({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    ParmsIdType: parmsIdType,\n    MemoryPoolHandle: memoryPoolHandle,\n    Vector: vector\n  })\n  const cipherText = CipherText({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    ParmsIdType: parmsIdType,\n    MemoryPoolHandle: memoryPoolHandle,\n    Vector: vector\n  })\n  const batchEncoder = BatchEncoder({\n    Exception: exception,\n    MemoryPoolHandle: memoryPoolHandle,\n    PlainText: plainText,\n    Vector: vector\n  })\n  const ckksEncoder = CKKSEncoder({\n    Exception: exception,\n    MemoryPoolHandle: memoryPoolHandle,\n    PlainText: plainText,\n    Vector: vector\n  })\n  const encryptionParameterQualifiers = EncryptionParameterQualifiers()\n  const encryptionParameters = EncryptionParameters({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Modulus: modulus,\n    SchemeType: schemeType,\n    ParmsIdType: parmsIdType,\n    Vector: vector\n  })\n  const contextData = ContextData({\n    Exception: exception,\n    EncryptionParameters: encryptionParameters,\n    ParmsIdType: parmsIdType,\n    EncryptionParameterQualifiers: encryptionParameterQualifiers\n  })\n  const context = Context({\n    ParmsIdType: parmsIdType,\n    ContextData: contextData,\n    SecurityLevel: securityLevel\n  })\n  const decryptor = Decryptor({\n    Exception: exception,\n    PlainText: plainText\n  })\n  const encryptor = Encryptor({\n    Exception: exception,\n    MemoryPoolHandle: memoryPoolHandle,\n    CipherText: cipherText,\n    Serializable: serializable\n  })\n  const evaluator = Evaluator({\n    Exception: exception,\n    MemoryPoolHandle: memoryPoolHandle,\n    CipherText: cipherText,\n    PlainText: plainText\n  })\n  const publicKey = PublicKey({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const secretKey = SecretKey({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const relinKeys = RelinKeys({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const galoisKeys = GaloisKeys({\n    Exception: exception,\n    ComprModeType: comprModeType,\n    Vector: vector\n  })\n  const keyGenerator = KeyGenerator({\n    Exception: exception,\n    PublicKey: publicKey,\n    SecretKey: secretKey,\n    RelinKeys: relinKeys,\n    GaloisKeys: galoisKeys,\n    Serializable: serializable\n  })\n\n  /**\n   * @interface SEAL\n   */\n  return {\n    BatchEncoder: batchEncoder,\n    CipherText: cipherText,\n    CKKSEncoder: ckksEncoder,\n    CoeffModulus: coeffModulus, // Singleton\n    ComprModeType: comprModeType, // Singleton\n    ContextData: contextData,\n    Context: context,\n    Decryptor: decryptor,\n    EncryptionParameterQualifiers: encryptionParameterQualifiers,\n    EncryptionParameters: encryptionParameters,\n    Encryptor: encryptor,\n    Evaluator: evaluator,\n    Exception: exception, // Singleton\n    GaloisKeys: galoisKeys,\n    KeyGenerator: keyGenerator,\n    MemoryPoolHandle: memoryPoolHandle, // Singleton\n    Modulus: modulus,\n    ParmsIdType: parmsIdType,\n    PlainText: plainText,\n    PlainModulus: plainModulus, // Singleton\n    PublicKey: publicKey,\n    RelinKeys: relinKeys,\n    SchemeType: schemeType,\n    SecretKey: secretKey,\n    SecurityLevel: securityLevel, // Singleton\n    Serializable: serializable,\n    Vector: vector,\n    Version: version\n  }\n}\n","import { ComprModeType } from './compr-mode-type'\nimport { Context } from './context'\nimport { Exception, SealError } from './exception'\nimport { autoFinalize } from './finalizer'\nimport { Instance, Library, LoaderOptions } from './seal'\nimport { VectorConstructorOptions } from './vector'\n\nexport interface SecretKeyDependencyOptions {\n  readonly Exception: Exception\n  readonly ComprModeType: ComprModeType\n  readonly Vector: VectorConstructorOptions\n}\n\nexport interface SecretKeyDependencies {\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: SecretKeyDependencyOptions): SecretKeyConstructorOptions\n}\n\nexport interface SecretKeyConstructorOptions {\n  (): SecretKey\n}\n\nexport interface SecretKey {\n  readonly instance: Instance\n  readonly inject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n  readonly load: (context: Context, encoded: string) => void\n  readonly loadArray: (context: Context, array: Uint8Array) => void\n  readonly copy: (key: SecretKey) => void\n  readonly clone: () => SecretKey\n  readonly move: (key: SecretKey) => void\n}\n\nconst SecretKeyConstructor =\n  (library: Library): SecretKeyDependencies =>\n  ({\n    Exception,\n    ComprModeType,\n    Vector\n  }: SecretKeyDependencyOptions): SecretKeyConstructorOptions =>\n  (): SecretKey => {\n    const Constructor = library.SecretKey\n    let _instance = new Constructor()\n\n    /**\n     * @implements SecretKey\n     */\n\n    /**\n     * @interface SecretKey\n     */\n    const self: SecretKey = {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name SecretKey#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance\n       *\n       * @private\n       * @function\n       * @name SecretKey#inject\n       * @param {Instance} instance WASM instance\n       */\n      inject(instance: Instance) {\n        self.delete()\n        _instance = new Constructor(instance)\n        fin.reregister(_instance)\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name SecretKey#delete\n       */\n      delete() {\n        if (!_instance) {\n          return\n        }\n        fin.unregister()\n        _instance.delete()\n        _instance = undefined\n      },\n\n      /**\n       * Save the Encryption Parameters to a base64 string\n       *\n       * @function\n       * @name SecretKey#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        try {\n          return _instance.saveToString(compression)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Save the SecretKey as a binary Uint8Array\n       *\n       * @function\n       * @name SecretKey#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the SecretKey in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      },\n\n      /**\n       * Load a SecretKey from a base64 string\n       *\n       * @function\n       * @name SecretKey#load\n       * @param {Context} context Encryption context to enforce\n       * @param {string} encoded Base64 encoded string\n       */\n      load(context: Context, encoded: string) {\n        try {\n          _instance.loadFromString(context.instance, encoded)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Load a SecretKey from an Uint8Array holding binary data\n       *\n       * @function\n       * @name SecretKey#loadArray\n       * @param {Context} context Encryption context to enforce\n       * @param {Uint8Array} array TypedArray containing binary data\n       */\n      loadArray(context: Context, array: Uint8Array) {\n        try {\n          _instance.loadFromArray(context.instance, array)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy an existing SecretKey and overwrite this instance\n       *\n       * @function\n       * @name SecretKey#copy\n       * @param {SecretKey} key SecretKey to copy\n       * @example\n       * const keyA = keyGenerator.secretKey()\n       * const keyB = seal.SecretKey()\n       * keyB.copy(keyA)\n       * // keyB holds a copy of keyA\n       */\n      copy(key: SecretKey) {\n        try {\n          _instance.copy(key.instance)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Clone and return a new instance of this SecretKey\n       *\n       * @function\n       * @name SecretKey#clone\n       * @returns {SecretKey}\n       * @example\n       * const keyA = keyGenerator.secretKey()\n       * const keyB = keyA.clone()\n       * // keyB holds a copy of keyA\n       */\n      clone(): SecretKey {\n        try {\n          const clonedInstance = _instance.clone()\n          const key = SecretKeyConstructor(library)({\n            Exception,\n            ComprModeType,\n            Vector\n          })()\n          key.inject(clonedInstance)\n          return key\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Move a SecretKey into this one and delete the old reference\n       *\n       * @function\n       * @name SecretKey#move\n       * @param {SecretKey} key SecretKey to move\n       * @example\n       * const keyA = keyGenerator.secretKey()\n       * const keyB = seal.SecretKey()\n       * keyB.move(keyA)\n       * // keyB holds a the instance of keyA.\n       * // keyA no longer holds an instance\n       */\n      move(key: SecretKey) {\n        try {\n          _instance.move(key.instance)\n          // TODO: find optimization\n          // This method results in a copy instead of a real move.\n          // Therefore, we need to delete the old instance.\n          key.delete()\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      }\n    }\n\n    const fin = autoFinalize(self, _instance)\n\n    return self\n  }\n\nexport const SecretKeyInit = ({\n  loader\n}: LoaderOptions): SecretKeyDependencies => {\n  const library: Library = loader.library\n  return SecretKeyConstructor(library)\n}\n","import { Library, LoaderOptions } from './seal'\n\nexport interface SecurityLevelDependencies {\n  (): SecurityLevelConstructorOptions\n}\n\nexport interface SecurityLevelConstructorOptions {\n  (): SecurityLevel\n}\n\nexport interface SecurityLevel {\n  readonly none: any\n  readonly tc128: any\n  readonly tc192: any\n  readonly tc256: any\n}\n\nconst SecurityLevelConstructor =\n  (library: Library): SecurityLevelDependencies =>\n  (): SecurityLevelConstructorOptions =>\n  (): SecurityLevel => {\n    // Static methods\n    const _none = library.SecLevelType.none\n    const _tc128 = library.SecLevelType.tc128\n    const _tc192 = library.SecLevelType.tc192\n    const _tc256 = library.SecLevelType.tc256\n\n    /**\n     * @implements SecurityLevel\n     */\n\n    /**\n     * @interface SecurityLevel\n     */\n    return {\n      /**\n       * Returns the 'none' security level\n       *\n       * @readonly\n       * @name SecurityLevel.none\n       * @type {SecurityLevel.none}\n       */\n      get none() {\n        /**\n         * @typedef {SecurityLevel.none} SecurityLevel.none\n         */\n        return _none\n      },\n\n      /**\n       * Returns the '128' security level\n       *\n       * @readonly\n       * @name SecurityLevel.tc128\n       * @type {SecurityLevel.tc128}\n       */\n      get tc128() {\n        /**\n         * @typedef {SecurityLevel.tc128} SecurityLevel.tc128\n         */\n        return _tc128\n      },\n\n      /**\n       * Returns the '192' security level\n       *\n       * @readonly\n       * @name SecurityLevel.tc192\n       * @type {SecurityLevel.tc192}\n       */\n      get tc192() {\n        /**\n         * @typedef {SecurityLevel.tc192} SecurityLevel.tc192\n         */\n        return _tc192\n      },\n\n      /**\n       * Returns the '256' security level\n       *\n       * @readonly\n       * @name SecurityLevel.tc256\n       * @type {SecurityLevel.tc256}\n       */\n      get tc256() {\n        /**\n         * @typedef {SecurityLevel.tc256} SecurityLevel.tc256\n         */\n        return _tc256\n      }\n    }\n  }\nexport const SecurityLevelInit = ({\n  loader\n}: LoaderOptions): SecurityLevelDependencies => {\n  const library: Library = loader.library\n  return SecurityLevelConstructor(library)\n}\n","import { ComprModeType } from './compr-mode-type'\nimport { Exception, SealError } from './exception'\nimport { autoFinalize } from './finalizer'\nimport { Instance } from './seal'\nimport { VectorConstructorOptions } from './vector'\n\nexport interface SerializableDependencyOptions {\n  readonly Exception: Exception\n  readonly Vector: VectorConstructorOptions\n  readonly ComprModeType: ComprModeType\n}\n\nexport interface SerializableDependencies {\n  ({\n    Exception,\n    Vector,\n    ComprModeType\n  }: SerializableDependencyOptions): SerializableConstructorOptions\n}\n\nexport interface SerializableConstructorOptions {\n  (): Serializable\n}\n\nexport interface Serializable {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly save: (compression?: ComprModeType) => string\n  readonly saveArray: (compression?: ComprModeType) => Uint8Array\n}\n\nconst SerializableConstructor =\n  (): SerializableDependencies =>\n  ({\n    Exception,\n    Vector,\n    ComprModeType\n  }: SerializableDependencyOptions): SerializableConstructorOptions =>\n  (): Serializable => {\n    let _instance: Instance\n\n    /**\n     * @implements Serializable\n     */\n\n    /**\n     * @interface Serializable\n     */\n    const self: Serializable = {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Serializable#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name Serializable#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        self.delete()\n        _instance = instance\n        fin.reregister(_instance)\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Serializable#delete\n       */\n      delete() {\n        if (!_instance) {\n          return\n        }\n        fin.unregister()\n        _instance.delete()\n        _instance = undefined\n      },\n\n      /**\n       * Save to a base64 string\n       *\n       * @function\n       * @name Serializable#save\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {string} Base64 encoded string\n       */\n      save(compression: ComprModeType = ComprModeType.zstd): string {\n        try {\n          return _instance.saveToString(compression)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Save as a binary Uint8Array\n       *\n       * @function\n       * @name Serializable#saveArray\n       * @param {ComprModeType} [compression={@link ComprModeType.zstd}] The compression mode to use\n       * @returns {Uint8Array} A byte array containing the Serializable object in binary form\n       */\n      saveArray(compression: ComprModeType = ComprModeType.zstd): Uint8Array {\n        const tempVect = Vector()\n        const instance = _instance.saveToArray(compression)\n        tempVect.unsafeInject(instance)\n        tempVect.setType('Uint8Array')\n        const tempArr = tempVect.toArray() as Uint8Array\n        tempVect.delete()\n        return tempArr\n      }\n    }\n\n    const fin = autoFinalize(self, _instance)\n\n    return self\n  }\n\nexport const SerializableInit = (): SerializableDependencies => {\n  return SerializableConstructor()\n}\n","import { INSTANCE_DELETED, UNSUPPORTED_VECTOR_TYPE } from './constants'\nimport { Exception, SealError } from './exception'\nimport { autoFinalize } from './finalizer'\nimport { Instance, Library, LoaderOptions } from './seal'\n\nexport interface VectorDependencyOptions {\n  readonly Exception: Exception\n}\n\nexport interface VectorDependencies {\n  ({ Exception }: VectorDependencyOptions): VectorConstructorOptions\n}\n\nexport interface VectorConstructorOptions {\n  (): Vector\n}\n\nexport interface Vector {\n  readonly instance: Instance\n  readonly unsafeInject: (instance: Instance) => void\n  readonly delete: () => void\n  readonly from: (array: VectorTypes, type?: StringTypes) => Instance\n  readonly type: string\n  readonly setType: (type: StringTypes) => void\n  readonly size: number\n  readonly getValue: (index: number) => number\n  readonly resize: (size: number, fill: number) => void\n  readonly toArray: () => VectorTypes\n}\n\nexport type VectorTypes =\n  | Uint8Array\n  | Int32Array\n  | Uint32Array\n  | Float64Array\n  | BigInt64Array\n  | BigUint64Array\n\nexport type StringTypes =\n  | 'Uint8Array'\n  | 'Int32Array'\n  | 'Uint32Array'\n  | 'Float64Array'\n  | 'BigInt64Array'\n  | 'BigUint64Array'\n  | 'Modulus'\n\nconst VectorConstructor =\n  (library: Library): VectorDependencies =>\n  ({ Exception }: VectorDependencyOptions): VectorConstructorOptions =>\n  (): Vector => {\n    // Static methods\n    const _vecFromArrayUint8 = library.vecFromArrayUint8\n    const _vecFromArrayUint32 = library.vecFromArrayUint32\n    const _vecFromArrayInt32 = library.vecFromArrayInt32\n    const _vecFromArrayFloat64 = library.vecFromArrayFloat64\n    const _vecFromArrayBigInt64 = library.vecFromArrayBigInt64\n    const _vecFromArrayBigUint64 = library.vecFromArrayBigUint64\n    const _vecFromArrayModulus = library.vecFromArrayModulus\n    const _jsArrayUint8FromVec = library.jsArrayUint8FromVec\n    const _jsArrayUint32FromVec = library.jsArrayUint32FromVec\n    const _jsArrayInt32FromVec = library.jsArrayInt32FromVec\n    const _jsArrayFloat64FromVec = library.jsArrayFloat64FromVec\n    const _jsArrayStringFromVecInt64 = library.jsArrayStringFromVecInt64\n    const _jsArrayStringFromVecUint64 = library.jsArrayStringFromVecUint64\n    const _jsArrayStringFromVecModulus = library.jsArrayStringFromVecModulus\n\n    let _instance: Instance\n    let _type: StringTypes\n    /**\n     * @implements Vector\n     */\n\n    /**\n     * @interface Vector\n     */\n    const self: Vector = {\n      /**\n       * Get the underlying WASM instance\n       *\n       * @private\n       * @readonly\n       * @name Vector#instance\n       * @type {Instance}\n       */\n      get instance() {\n        return _instance\n      },\n\n      /**\n       * Inject this object with a raw WASM instance. No type checking is performed.\n       *\n       * @private\n       * @function\n       * @name Vector#unsafeInject\n       * @param {Instance} instance WASM instance\n       */\n      unsafeInject(instance: Instance) {\n        self.delete()\n        _instance = instance\n        fin.reregister(_instance)\n      },\n\n      /**\n       * Delete the underlying WASM instance.\n       *\n       * Should be called before dereferencing this object to prevent the\n       * WASM heap from growing indefinitely.\n       * @function\n       * @name Vector#delete\n       */\n      delete() {\n        if (!_instance) {\n          return\n        }\n        fin.unregister()\n        _instance.delete()\n        _instance = undefined\n      },\n\n      /**\n       * Converts a JS TypedArray into a vector\n       *\n       * @function\n       * @name Vector#from\n       * @param {VectorTypes} array The TypedArray to convert\n       * @param {StringTypes} [type] An optional type override - useful for 'Modulus' only\n       */\n      from(array: VectorTypes, type?: StringTypes) {\n        try {\n          _type = type ? type : (array.constructor.name as StringTypes)\n          switch (_type) {\n            case 'Uint8Array':\n              _instance = _vecFromArrayUint8(array)\n              break\n            case 'Int32Array':\n              _instance = _vecFromArrayInt32(array)\n              break\n            case 'Uint32Array':\n              _instance = _vecFromArrayUint32(array)\n              break\n            case 'Float64Array':\n              _instance = _vecFromArrayFloat64(array)\n              break\n            case 'BigInt64Array':\n              _instance = _vecFromArrayBigInt64(array.toString().split(','))\n              break\n            case 'BigUint64Array':\n              _instance = _vecFromArrayBigUint64(array.toString().split(','))\n              break\n            case 'Modulus':\n              _instance = _vecFromArrayModulus(array.toString().split(','))\n              break\n            default:\n              throw new Error(UNSUPPORTED_VECTOR_TYPE)\n          }\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * The Vector type\n       *\n       * @readonly\n       * @name Vector#type\n       */\n      get type(): StringTypes {\n        return _type\n      },\n\n      /**\n       * Set the Vector type\n       *\n       * @function\n       * @name Vector#setType\n       * @param {StringTypes} type the type of the vector\n       */\n      setType(type: StringTypes) {\n        _type = type\n      },\n\n      /**\n       * The vector size\n       *\n       * @readonly\n       * @name Vector#size\n       * @type {number}\n       */\n      get size(): number {\n        return _instance.size()\n      },\n\n      /**\n       * Get a value pointed to by the specified index\n       *\n       * @function\n       * @name Vector#getValue\n       * @param {number} index Index of the Vector\n       * @returns {number} Value of the element in the Vector pointed to by the index\n       */\n      getValue(index: number): number {\n        try {\n          return _instance.get(index)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Resizes a vector to the given size\n       *\n       * @function\n       * @name Vector#resize\n       * @param {number} size number of elements to resize\n       * @param {number} fill Data to fill the vector with\n       */\n      resize(size: number, fill: number) {\n        try {\n          _instance.resize(size, fill)\n        } catch (e) {\n          throw Exception.safe(e as SealError)\n        }\n      },\n\n      /**\n       * Copy a vector's data into a Typed Array\n       *\n       * Note: we cannot simply return a view on the underlying ArrayBuffer\n       * because WASM memory can grow and cause all the views to become\n       * neutered. We have to perform a hard copy to get data from WASM heap to JS.\n       *\n       * @function\n       * @name Vector#toArray\n       * @returns {VectorTypes} TypedArray containing values from the Vector\n       */\n      toArray(): VectorTypes {\n        if (!_instance) {\n          throw new Error(INSTANCE_DELETED)\n        }\n        switch (_type) {\n          case 'Uint8Array':\n            return Uint8Array.from(_jsArrayUint8FromVec(_instance))\n          case 'Int32Array':\n            return Int32Array.from(_jsArrayInt32FromVec(_instance))\n          case 'Uint32Array':\n            return Uint32Array.from(_jsArrayUint32FromVec(_instance))\n          case 'Float64Array':\n            return Float64Array.from(_jsArrayFloat64FromVec(_instance))\n          case 'BigInt64Array':\n            return BigInt64Array.from(_jsArrayStringFromVecInt64(_instance))\n          case 'BigUint64Array':\n            return BigUint64Array.from(_jsArrayStringFromVecUint64(_instance))\n          case 'Modulus':\n            return BigUint64Array.from(_jsArrayStringFromVecModulus(_instance))\n          default:\n            throw new Error(UNSUPPORTED_VECTOR_TYPE)\n        }\n      }\n    }\n\n    const fin = autoFinalize(self, _instance)\n\n    return self\n  }\n\nexport const VectorInit = ({ loader }: LoaderOptions): VectorDependencies => {\n  const library: Library = loader.library\n  return VectorConstructor(library)\n}\n","import sealLibrary from 'seal_allows_wasm_worker'\nimport { SEALLibrary } from './implementation/seal'\nimport { Loader, createLoader } from './main/loader'\nimport { SEAL } from './main/seal'\n/**\n * Export a function which loads the proper build\n */\nconst loader = async (): Promise<Loader> => createLoader(sealLibrary)\n\n/**\n * Main export for node-seal\n */\nexport default async (): Promise<SEALLibrary> => SEAL(loader)\n","import { BatchEncoderInit } from '../implementation/batch-encoder'\nimport { CipherTextInit } from '../implementation/cipher-text'\nimport { CKKSEncoderInit } from '../implementation/ckks-encoder'\nimport { CoeffModulusInit } from '../implementation/coeff-modulus'\nimport { ComprModeTypeInit } from '../implementation/compr-mode-type'\nimport { ContextInit } from '../implementation/context'\nimport { ContextDataInit } from '../implementation/context-data'\nimport { DecryptorInit } from '../implementation/decryptor'\nimport { EncryptionParameterQualifiersInit } from '../implementation/encryption-parameter-qualifiers'\nimport { EncryptionParametersInit } from '../implementation/encryption-parameters'\nimport { EncryptorInit } from '../implementation/encryptor'\nimport { EvaluatorInit } from '../implementation/evaluator'\nimport { ExceptionInit } from '../implementation/exception'\nimport { GaloisKeysInit } from '../implementation/galois-keys'\nimport { KeyGeneratorInit } from '../implementation/key-generator'\nimport { MemoryPoolHandleInit } from '../implementation/memory-pool-handle'\nimport { ModulusInit } from '../implementation/modulus'\nimport { ParmsIdTypeInit } from '../implementation/parms-id-type'\nimport { PlainModulusInit } from '../implementation/plain-modulus'\nimport { PlainTextInit } from '../implementation/plain-text'\nimport { PublicKeyInit } from '../implementation/public-key'\nimport { RelinKeysInit } from '../implementation/relin-keys'\nimport { SchemeTypeInit } from '../implementation/scheme-type'\nimport { SEALConstructor, SEALLibrary } from '../implementation/seal'\nimport { SecretKeyInit } from '../implementation/secret-key'\nimport { SecurityLevelInit } from '../implementation/security-level'\nimport { SerializableInit } from '../implementation/serializable'\nimport { VectorInit } from '../implementation/vector'\nimport { Loader } from './loader'\n\n/**\n * Main export for the library\n */\nexport const SEAL = async (\n  Loader: () => Promise<Loader>\n): Promise<SEALLibrary> => {\n  const loader = await Loader()\n  return SEALConstructor({\n    BatchEncoder: BatchEncoderInit({\n      loader\n    }),\n    CipherText: CipherTextInit({\n      loader\n    }),\n    CKKSEncoder: CKKSEncoderInit({\n      loader\n    }),\n    CoeffModulus: CoeffModulusInit({\n      loader\n    }),\n    ComprModeType: ComprModeTypeInit({\n      loader\n    }),\n    ContextData: ContextDataInit({\n      loader\n    }),\n    Context: ContextInit({\n      loader\n    }),\n    Decryptor: DecryptorInit({\n      loader\n    }),\n    EncryptionParameterQualifiers: EncryptionParameterQualifiersInit(),\n    EncryptionParameters: EncryptionParametersInit({\n      loader\n    }),\n    Encryptor: EncryptorInit({\n      loader\n    }),\n    Evaluator: EvaluatorInit({\n      loader\n    }),\n    Exception: ExceptionInit({\n      loader\n    }),\n    GaloisKeys: GaloisKeysInit({\n      loader\n    }),\n    KeyGenerator: KeyGeneratorInit({\n      loader\n    }),\n    MemoryPoolHandle: MemoryPoolHandleInit({\n      loader\n    }),\n    Modulus: ModulusInit({\n      loader\n    }),\n    ParmsIdType: ParmsIdTypeInit({\n      loader\n    }),\n    PlainText: PlainTextInit({\n      loader\n    }),\n    PlainModulus: PlainModulusInit({\n      loader\n    }),\n    PublicKey: PublicKeyInit({\n      loader\n    }),\n    RelinKeys: RelinKeysInit({\n      loader\n    }),\n    SchemeType: SchemeTypeInit({\n      loader\n    }),\n    SecretKey: SecretKeyInit({\n      loader\n    }),\n    SecurityLevel: SecurityLevelInit({\n      loader\n    }),\n    Serializable: SerializableInit(),\n    Vector: VectorInit({\n      loader\n    })\n  })\n}\n"],"names":["async","Module","moduleArg","ca","l","aa","ba","url","URL","b","a","XMLHttpRequest","open","responseType","send","Uint8Array","response","ea","u","fa","ha","ia","ja","w","y","z","A","C","ka","la","ma","na","da","console","error","bind","p","oa","pa","buffer","Int8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","BigInt64Array","BigUint64Array","ra","D","E","qa","onAbort","WebAssembly","RuntimeError","ta","c","ArrayBuffer","isView","sa","instantiate","d","va","name","constructor","this","message","status","wa","length","shift","xa","ya","za","preRun","push","Ba","Ca","V","G","String","fromCharCode","H","J","Fa","K","Error","super","Ga","L","hasOwnProperty","forEach","e","Ia","Ja","TypeError","Ka","T","X","U","La","Ma","O","FinalizationRegistry","count","value","Z","unregister","register","Oa","Pa","Object","defineProperty","Qa","Ra","Y","apply","ga","Sa","Ua","g","f","h","ua","Va","Wa","toString","Xa","Ya","clone","Aa","P","Za","$a","W","ab","bb","db","eb","create","writable","fb","m","n","k","$","ib","gb","hb","jb","get","lb","kb","Q","includes","mb","ob","nb","R","S","map","join","Array","pb","pop","qb","rb","t","q","split","r","Function","sb","tb","trim","indexOf","slice","ub","wb","xb","Zb","yb","zb","Ab","Bb","Cb","assign","optional","codePointAt","Db","charCodeAt","Eb","TextDecoder","Fb","Hb","Ib","decode","subarray","Jb","Kb","Lb","fromCodePoint","Mb","Nb","Ob","Pb","Sb","Tb","Ub","Vb","Wb","onExit","Yb","$b","USER","LOGNAME","PATH","PWD","HOME","LANG","navigator","language","replace","_","bc","crypto","getRandomValues","F","prototype","isAliasOf","getPrototypeOf","call","isDeleted","deleteLater","Symbol","dispose","cb","pointerType","noExitRuntime","printErr","wasmBinary","thisProgram","cc","dc","ec","fc","v","BigInt","asUintN","Ta","x","M","Ha","N","B","vb","keys","I","startsWith","substring","concat","enumerable","configurable","set","splice","className","values","o","Gb","BYTES_PER_ELEMENT","s","Rb","toValue","getStringOrSymbol","toReturnWire","emval_returnValue","Qb","j","i","clearTimeout","id","setTimeout","Xb","performance","now","Date","getFullYear","getTimezoneOffset","Math","max","Number","abs","floor","padStart","min","ceil","byteLength","grow","Infinity","exports","_emscripten_stack_alloc","emscripten_stack_get_current","gc","_main","monitorRunDependencies","instantiateWasm","Promise","instance","preInit","hc","calledRun","onRuntimeInitialized","noInitialRun","postRun","setStatus","UNSUPPORTED_VECTOR_TYPE","globalRegistry","registry","undefined","entry","resource","delete","target","reregister","token","newResource","newEntry","autoFinalize","BatchEncoderInit","loader","library","Exception","MemoryPoolHandle","PlainText","Vector","context","Constructor","BatchEncoder","_instance","safe","self","unsafeInject","fin","encode","array","plainText","plain","stringArray","signed","pool","global","tempVect","decodeInt32","setType","tempArr","toArray","decodeUint32","decodeBigInt","from","slotCount","BatchEncoderConstructor","CipherTextConstructor","ComprModeType","ParmsIdType","params","Ciphertext","constructParams","parmsId","sizeCapacity","construct","reserve","capacity","resize","size","release","coeffModulusSize","polyModulusDegree","isTransparent","isNttForm","parms","inject","scale","setScale","save","compression","zstd","saveToString","saveArray","saveToArray","load","encoded","loadFromString","loadArray","loadFromArray","copy","cipher","clonedInstance","move","CipherTextInit","CKKSEncoderInit","CKKSEncoder","decodeDouble","CKKSEncoderConstructor","CoeffModulusInit","SecurityLevel","_MaxBitCount","CoeffModulus","MaxBitCount","_BFVDefault","BFVDefault","_CreateFromArray","CreateFromArray","securityLevel","tc128","vectorModulus","Create","bitSizes","CoeffModulusConstructor","ComprModeTypeInit","_none","none","_zlib","zlib","_zstd","ComprModeTypeConstructor","ContextInit","ContextData","encryptionParams","expandModChain","SEALContext","toHuman","getContextData","contextData","keyContextData","firstContextData","lastContextData","parametersSet","keyParmsId","firstParmsId","lastParmsId","usingKeyswitching","ContextConstructor","ContextDataConstructor","EncryptionParameters","EncryptionParameterQualifiers","encryptionParameters","qualifiers","encParmQualifiers","totalCoeffModulusBitCount","prevContextData","cxtData","nextContextData","chainIndex","ContextDataInit","DecryptorInit","secretKey","Decryptor","decrypt","cipherText","invariantNoiseBudget","DecryptorConstructor","EncryptionParameterQualifiersInit","usingFFT","usingNTT","usingBatching","usingFastPlainLift","usingDescendingModulusChain","EncryptionParametersInit","Modulus","SchemeType","schemeType","setPolyModulusDegree","setCoeffModulus","coeffModulus","setPlainModulus","plainModulus","scheme","smallModulus","EncryptionParametersConstructor","EncryptorInit","CipherText","Serializable","publicKey","Encryptor","constructInstance","encrypt","encryptSerializable","temp","encryptSymmetric","encryptSymmetricSerializable","serialized","encryptZero","encryptZeroSerializable","EncryptorConstructor","EvaluatorInit","Evaluator","negate","encrypted","destination","add","sub","multiply","square","relinearize","relinKeys","cipherModSwitchToNext","cipherModSwitchTo","plainModSwitchToNext","plainModSwitchTo","rescaleToNext","rescaleTo","modReduceToNext","modReduceTo","exponentiate","exponent","addPlain","subPlain","multiplyPlain","plainTransformToNtt","destinationNtt","cipherTransformToNtt","cipherTransformFromNtt","encryptedNtt","applyGalois","galoisElt","galoisKeys","rotateRows","steps","rotateColumns","rotateVector","complexConjugate","sumElements","newDest","dotProduct","dotProductPlain","EvaluatorConstructor","ExceptionInit","_getException","getException","ExceptionConstructor","GaloisKeysConstructor","GaloisKeys","getIndex","hasKey","key","GaloisKeysInit","KeyGeneratorInit","PublicKey","SecretKey","RelinKeys","KeyGenerator","createPublicKey","createPublicKeySerializable","createRelinKeys","createRelinKeysSerializable","createGaloisKeys","createGaloisKeysSerializable","KeyGeneratorConstructor","MemoryPoolHandleInit","_global","MemoryPoolHandleGlobal","_threadLocal","MemoryPoolHandleThreadLocal","threadLocal","MemoryPoolHandleConstructor","ModulusInit","inst","setValue","createModulus","bitCount","isZero","isPrime","ModulusConstructor","ParmsIdTypeInit","ParmsIdTypeConstructor","PlainModulusInit","_Batching","PlainModulus","Batching","_BatchingVector","BatchingVector","bitSize","smallMod","polyPlainModulusDegree","vectBitSizes","vect","PlainModulusConstructor","PlainTextConstructor","Plaintext","coeffCount","shrinkToFit","setZero","significantCoeffCount","nonzeroCoeffCount","toPolynomial","PlainTextInit","PublicKeyConstructor","PublicKeyInit","RelinKeysConstructor","keyPower","RelinKeysInit","SchemeTypeInit","_bfv","bfv","_ckks","ckks","_bgv","bgv","SchemeTypeConstructor","SecretKeyConstructor","SecretKeyInit","SecurityLevelInit","SecLevelType","_tc128","_tc192","tc192","_tc256","tc256","SecurityLevelConstructor","SerializableInit","VectorInit","_vecFromArrayUint8","vecFromArrayUint8","_vecFromArrayUint32","vecFromArrayUint32","_vecFromArrayInt32","vecFromArrayInt32","_vecFromArrayFloat64","vecFromArrayFloat64","_vecFromArrayBigInt64","vecFromArrayBigInt64","_vecFromArrayBigUint64","vecFromArrayBigUint64","_vecFromArrayModulus","vecFromArrayModulus","_jsArrayUint8FromVec","jsArrayUint8FromVec","_jsArrayUint32FromVec","jsArrayUint32FromVec","_jsArrayInt32FromVec","jsArrayInt32FromVec","_jsArrayFloat64FromVec","jsArrayFloat64FromVec","_jsArrayStringFromVecInt64","jsArrayStringFromVecInt64","_jsArrayStringFromVecUint64","jsArrayStringFromVecUint64","_jsArrayStringFromVecModulus","jsArrayStringFromVecModulus","_type","type","getValue","index","fill","VectorConstructor","bin","createLoader","sealLibrary","allows_wasm_worker_es","Loader","Context","exception","comprModeType","memoryPoolHandle","vector","modulus","serializable","parmsIdType","batchEncoder","ckksEncoder","encryptionParameterQualifiers","decryptor","encryptor","evaluator","Version","SEALConstructor","SEAL"],"mappings":"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"}